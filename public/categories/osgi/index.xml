<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Osgi on Carlibrated!</title><link>https://thecarlhall.github.io/categories/osgi/</link><description>Recent content in Osgi on Carlibrated!</description><generator>Hugo</generator><language>en</language><managingEditor>carl@halls.farm (Carl Hall)</managingEditor><webMaster>carl@halls.farm (Carl Hall)</webMaster><lastBuildDate>Mon, 30 Jul 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://thecarlhall.github.io/categories/osgi/index.xml" rel="self" type="application/rss+xml"/><item><title>Find activate-immediately services that lack an activate method</title><link>https://thecarlhall.github.io/post/find-activate-immediately-services-that-lack-an-activate-method/</link><pubDate>Mon, 30 Jul 2012 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/find-activate-immediately-services-that-lack-an-activate-method/</guid><description>&lt;p>Immediate service activation in OSGi can be tricky but there are &lt;a href="http://thecarlhall.wordpress.com/2011/02/04/when-to-immediately-activate-an-osgi-component/" title="some basic rules to consider">some basic rules to consider&lt;/a>. Another point to think about is when a service doesn&amp;rsquo;t contain an activate method. The code base I work in uses Felix&amp;rsquo;s SCR annotations which makes this search pretty concise. I also assume that the code is in git. If your code isn&amp;rsquo;t, you should be able to replace &lt;code>git&lt;/code> with &lt;code>find &amp;lt;dir&amp;gt; -type f -exec &amp;lt;grep-fu here&amp;gt;&lt;/code>.&lt;/p></description></item><item><title>Understanding the ‘unresolved constraint’, ‘missing requirement’ message from Apache Felix Pt. 2</title><link>https://thecarlhall.github.io/post/understanding-the-unresolved-constraint-missing-requirement-message-from-apache-felix-pt-2/</link><pubDate>Thu, 12 Jul 2012 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/understanding-the-unresolved-constraint-missing-requirement-message-from-apache-felix-pt-2/</guid><description>&lt;p>We previously took a look at &lt;a href="http://thecarlhall.wordpress.com/2012/01/19/understanding-the-unresolved-constraint-missing-resource-message-from-apache-felix/" title="Felix&amp;#39;s unresolved contract message">Felix&amp;rsquo;s unresolved constraint message&lt;/a>. I started testing with Felix 4.0.2 today and realized the output for an unresolved constraint has changed a bit.&lt;/p>
&lt;div class="highlight-container">

 &lt;button class="copy-code-btn outline">Copy&lt;/button>

 
 &lt;pre tabindex="0">&lt;code>ERROR: Bundle org.sakaiproject.nakamura.world [76] Error starting file:bundles/org.sakaiproject.nakamura.world_1.4.0.SNAPSHOT.jar (org.osgi.framework.BundleException: Unresolved constraint in bundle org.sakaiproject.nakamura.world [76]: Unable to resolve 76.0: missing requirement [76.0] osgi.wiring.package; (&amp;amp;amp;(osgi.wiring.package=javax.servlet)(version&amp;amp;gt;=3.0.0)))
11.07.2012 17:01:43.297 *ERROR* [FelixDispatchQueue] org.sakaiproject.nakamura.world FrameworkEvent ERROR (org.osgi.framework.BundleException: Unresolved constraint in bundle org.sakaiproject.nakamura.world [76]: Unable to resolve 76.0: missing requirement [76.0] osgi.wiring.package; (&amp;amp;amp;(osgi.wiring.package=javax.servlet)(version&amp;amp;gt;=3.0.0))) org.osgi.framework.BundleException: Unresolved constraint in bundle org.sakaiproject.nakamura.world [76]: Unable to resolve 76.0: missing requirement [76.0] osgi.wiring.package; (&amp;amp;amp;(osgi.wiring.package=javax.servlet)(version&amp;amp;gt;=3.0.0))
 at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:3826)
 at org.apache.felix.framework.Felix.startBundle(Felix.java:1868)
 at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1191)
 at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:295)
 at java.lang.Thread.run(Thread.java:679)&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>We have the same unresolved constraint..missing requirement as before but the part we&amp;rsquo;re interested in has changed a bit. Let&amp;rsquo;s break apart that first message.&lt;/p></description></item><item><title>Getting started with Pax Runner</title><link>https://thecarlhall.github.io/post/getting-started-with-pax-runner/</link><pubDate>Wed, 11 Jul 2012 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/getting-started-with-pax-runner/</guid><description>&lt;p>After fighting through a &lt;a href="https://source.sakaiproject.org/contrib//cans/cans_AA/trunk/dist/src/main/assembly/bin.xml" title="Maven assembly for a small project">Maven assembly for a small project&lt;/a>, I just couldn&amp;rsquo;t take that headache again. I&amp;rsquo;ve used &lt;a href="http://sling.apache.org/site/maven-launchpad-plugin.html" title="Apache Sling&amp;#39;s Maven Launchpad Plugin">Apache Sling&amp;rsquo;s Maven Launchpad Plugin&lt;/a> to put together a standalone OSGi server but Launchpad doesn&amp;rsquo;t allow you to pick which OSGi container you deploy to or what version of Felix gets used. I&amp;rsquo;ve started working with &lt;a href="http://team.ops4j.org/wiki/display/paxrunner/Pax&amp;#43;Runner" title="Pax Runner">Pax Runner&lt;/a> because a) it looks pretty nifty, b) those Pax folks are doing great stuff for the OSGi deployers out there.&lt;/p>
&lt;p>&lt;a href="http://team.ops4j.org/wiki/display/paxrunner/Pax&amp;#43;Runner" title="Pax Runner">Pax Runner&lt;/a> has a few sweet features I&amp;rsquo;m really digging right now.&lt;/p></description></item><item><title>Using pygraphviz to plot OSGi bundle dependencies</title><link>https://thecarlhall.github.io/post/using-pygraphviz-to-plot-osgi-bundle-dependencies/</link><pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/using-pygraphviz-to-plot-osgi-bundle-dependencies/</guid><description>&lt;p>I&amp;rsquo;ve been working on an OSGi project for the last few years. As with any project, evolutionary changes will eventually require some cleanup. As new bundles have been added over time, the graph of dependencies is starting to get unwieldy in places. Even with good management of these dependencies, a nice visual layout of things can really help you see how your bundles are interconnected and give you the power to start separating some connections if you graph starts to hit cyclical dependencies.&lt;/p></description></item></channel></rss>
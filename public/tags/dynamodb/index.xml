<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dynamodb on Carlibrated!</title><link>https://thecarlhall.github.io/tags/dynamodb/</link><description>Recent content in Dynamodb on Carlibrated!</description><generator>Hugo</generator><language>en</language><managingEditor>carl@halls.farm (Carl Hall)</managingEditor><webMaster>carl@halls.farm (Carl Hall)</webMaster><lastBuildDate>Sun, 15 Nov 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://thecarlhall.github.io/tags/dynamodb/index.xml" rel="self" type="application/rss+xml"/><item><title>Requiring External Resources Before Attempting JUnit Tests</title><link>https://thecarlhall.github.io/post/requiring-external-resources-before-attempting-junit-tests/</link><pubDate>Sun, 15 Nov 2015 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/requiring-external-resources-before-attempting-junit-tests/</guid><description>&lt;p>If you have an integration test that requires external resources to be available, like &lt;a href="https://thecarlhall.wordpress.com/2015/11/14/integration-testing-with-dynamodb-locally/">a local DynamoDB server&lt;/a>, that test should be skipped rather than fail when the resources aren&amp;rsquo;t there. In JUnit, this can be accomplished by throwing an &lt;code>AssumptionViolatedException&lt;/code> from an &lt;code>@BeforeClass&lt;/code> method, or better yet, with reusable &lt;code>ClassRule&lt;/code>s.&lt;/p></description></item><item><title>Integration Testing with DynamoDB Locally</title><link>https://thecarlhall.github.io/post/integration-testing-with-dynamodb-locally/</link><pubDate>Sat, 14 Nov 2015 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/integration-testing-with-dynamodb-locally/</guid><description>&lt;p>One of the really nice things about using DynamoDB to back an application is the ability to write integration tests that have a good test server without trying to mimic DynamoDB yourself. &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tools.DynamoDBLocal.html#Tools.DynamoDBLocal.DownloadingAndRunning">DynamoDB_Local is available from AWS&lt;/a> and is easily incorporated into a Maven build. Take a look through the documentation for &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tools.DynamoDBLocal.html">running DynamoDB on Your Computer&lt;/a> for the parameters available.&lt;/p></description></item></channel></rss>
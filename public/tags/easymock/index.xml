<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Easymock on Carlibrated!</title><link>https://thecarlhall.github.io/tags/easymock/</link><description>Recent content in Easymock on Carlibrated!</description><generator>Hugo</generator><language>en</language><managingEditor>carl@halls.farm (Carl Hall)</managingEditor><webMaster>carl@halls.farm (Carl Hall)</webMaster><lastBuildDate>Thu, 03 Dec 2009 00:00:00 +0000</lastBuildDate><atom:link href="https://thecarlhall.github.io/tags/easymock/index.xml" rel="self" type="application/rss+xml"/><item><title>EasyMock's "N matches expected, M recorded" not always what you expect</title><link>https://thecarlhall.github.io/post/easymocks-n-matches-expected-m-recorded-not-always-what-you-expect/</link><pubDate>Thu, 03 Dec 2009 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/easymocks-n-matches-expected-m-recorded-not-always-what-you-expect/</guid><description>&lt;p>This has been discussed in varying ways. I tend to point to &lt;a href="http://www.springone2gx.com/blog/scott_leberknight/2008/09/the_n_matchers_expected_m_recorded_problem_in_easymock">this article&lt;/a> as a good description of how to understand what is going on when this message is given. There is an interesting corner case that I feel needs to be explored as I&amp;rsquo;ve just wasted an hour trying to figure it out.&lt;/p>
&lt;p>Consider the following code sample.&lt;/p>
&lt;div class="highlight-container">

 &lt;button class="copy-code-btn outline">Copy&lt;/button>

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">testSomethingBasic&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Thing myThing &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Thing(EasyMock.&lt;span style="color:#a6e22e">isA&lt;/span>(Whatever.&lt;span style="color:#a6e22e">class&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// do more stuff in the test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">testSomethingElse&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IJobber myJobber &lt;span style="color:#f92672">=&lt;/span> EasyMock.&lt;span style="color:#a6e22e">createMock&lt;/span>(IJobber.&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> EasyMock.&lt;span style="color:#a6e22e">expect&lt;/span>(myJobber.&lt;span style="color:#a6e22e">doStuff&lt;/span>()).&lt;span style="color:#a6e22e">andReturn&lt;/span>(&lt;span style="color:#66d9ef">null&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// do more stuff in the test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>The thing to notice is that &lt;em>isA(..)&lt;/em> was used on a non-mock object then used again on a mock object. The problem here is that EasyMock will record that you created a matcher (ie. isA(Whatever.class)) that was never used then will record that you created another one that you did use. You&amp;rsquo;ll get an error to the nature of &amp;ldquo;1 matcher expected, 2 recorded&amp;rdquo;.&lt;/p></description></item></channel></rss>
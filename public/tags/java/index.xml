<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Carlibrated!</title><link>https://thecarlhall.github.io/tags/java/</link><description>Recent content in Java on Carlibrated!</description><generator>Hugo</generator><language>en</language><managingEditor>carl@halls.farm (Carl Hall)</managingEditor><webMaster>carl@halls.farm (Carl Hall)</webMaster><lastBuildDate>Fri, 27 Aug 2010 00:00:00 +0000</lastBuildDate><atom:link href="https://thecarlhall.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Thrift into Maven Locally</title><link>https://thecarlhall.github.io/post/getting-thrift-into-maven-locally/</link><pubDate>Fri, 27 Aug 2010 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/getting-thrift-into-maven-locally/</guid><description>&lt;p>I spent the better part of a morning trying to figure out how to get Thrift to be available in a Maven repository for a project I&amp;rsquo;m working on. Yes, I know there&amp;rsquo;s &lt;a href="https://issues.apache.org/jira/browse/THRIFT-363">a JIRA issue for this&lt;/a> but the comments are not clear and it&amp;rsquo;s more tailored towards publishing in the central Apache repository. Also, I tried using &amp;lsquo;ant publish&amp;rsquo; and got &amp;ldquo;Execute failed: java.io.IOException: Cannot run program &amp;ldquo;../../compiler/cpp/thrift&amp;rdquo;: java.io.IOException: error=2, No such file or directory&amp;rdquo;. I don&amp;rsquo;t need that kind of problem installing a library nor do I want to build the whole Thrift library.&lt;/p></description></item><item><title>Set OSGi Service Reference Target through Configuration</title><link>https://thecarlhall.github.io/post/set-osgi-service-reference-target-through-configuration/</link><pubDate>Sun, 06 Jun 2010 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/set-osgi-service-reference-target-through-configuration/</guid><description>&lt;p>Passing properties into a component or component factory is pretty integral to OSGi.&lt;/p>
&lt;p>A property can be a scalar or list of values.&lt;/p>
&lt;div class="highlight-container">

 &lt;button class="copy-code-btn outline">Copy&lt;/button>

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Component&lt;/span>(configurationFactory &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, policy &lt;span style="color:#f92672">=&lt;/span> ConfigurationPolicy.&lt;span style="color:#a6e22e">REQUIRE&lt;/span>) &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">GreatExample&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String DEFAULT_VALUE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;someVal&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Property&lt;/span>(value &lt;span style="color:#f92672">=&lt;/span> DEFAULT_VALUE) &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String PROP_SOME_VAL &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;prop.some.val&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> String someVal;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Property&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String PROP_SOME_LIST &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;prop.some.list&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> someList;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Reference&lt;/span> GreatService greatService;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// later in the activate method&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">activate&lt;/span>(Map&lt;span style="color:#f92672">&amp;lt;?&lt;/span>, &lt;span style="color:#f92672">?&amp;gt;&lt;/span> props) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// do work to get properties and setting locally if needed.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// For a good reference of how to properly retrieve properties&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// take a look at&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// http://svn.apache.org/viewvc/sling/trunk/bundles/commons/osgi/src/main/java/org/apache/sling/commons/osgi/OsgiUtil.java?view=markup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>The above example is terribly terse but the idea is pretty obvious. Now, from this, a more complex case can be built.&lt;/p></description></item><item><title>keytool is Strict</title><link>https://thecarlhall.github.io/post/keychain-is-strict/</link><pubDate>Mon, 05 Apr 2010 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/keychain-is-strict/</guid><description>&lt;p>Let&amp;rsquo;s say you are setting up a connection to an LDAP server and need to get your security bits in place.  To get the certificate chain from the server, you may do something like this:&lt;/p>
&lt;blockquote>
&lt;p>openssl s_client -showcerts -connect dir.example.com:636 &amp;gt; cert_chain.pem&lt;/p>
&lt;/blockquote>
&lt;p>Now with the output of that, you want to create or add to a keystore. That command looks like this:&lt;/p>
&lt;blockquote>
&lt;p>keytool -import -storetype jks -keystore dir_example.jks -storepass dir-example -file cert_chain.pem -alias ldap-ca -noprompt&lt;/p></description></item><item><title>Unit Testing with HttpClient's LocalTestServer</title><link>https://thecarlhall.github.io/post/unit-testing-with-httpclients-localtestserver/</link><pubDate>Thu, 25 Mar 2010 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/unit-testing-with-httpclients-localtestserver/</guid><description>&lt;p>When unit testing code that uses HttpClient, it can get a bit tricky to not test against a active web server.  There are a couple of approaches to this to keep your tests at the unit level.&lt;/p>
&lt;ol>
&lt;li>Mock and inject HttpClient &amp;ndash; While this is certainly possible and gives you complete control, it can take a lot of mocking and get tedious quite quickly.&lt;/li>
&lt;li>Use LocalTestServer from HttpClient &amp;ndash; This is the point of this post and I will now explain.&lt;/li>
&lt;/ol>
&lt;p>Let&amp;rsquo;s take a look at the basic setup for getting this test server up.&lt;/p></description></item><item><title>Eclipse, JUnit and an odd networking issue</title><link>https://thecarlhall.github.io/post/eclipse-junit-and-an-odd-networking-issue/</link><pubDate>Thu, 10 Dec 2009 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/eclipse-junit-and-an-odd-networking-issue/</guid><description>&lt;p>My coworker started having issues with getting JUnit to do anything in Eclipse. After some digging around, it was discovered that, for whatever reason, the JUnit runner was trying to create a network connection and couldn&amp;rsquo;t. He tried to perform an update of Eclipse plugins and that failed also, for the same network connectivity reasons.&lt;/p>
&lt;p>After a lot of digging and much gnashing of teeth, &lt;a href="http://pvaneynd.livejournal.com/132635.html">he came across this page&lt;/a> which outlines an issue where Java has started connecting using IPv6. We&amp;rsquo;re not sure if this is a Debian package issue or something from elsewhere but thankfully the LiveJournal page outlines a couple of fixes. The fix performed at the system level rather than by Java properties is what fixed things for him.&lt;/p></description></item><item><title>EasyMock's "N matches expected, M recorded" not always what you expect</title><link>https://thecarlhall.github.io/post/easymocks-n-matches-expected-m-recorded-not-always-what-you-expect/</link><pubDate>Thu, 03 Dec 2009 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/easymocks-n-matches-expected-m-recorded-not-always-what-you-expect/</guid><description>&lt;p>This has been discussed in varying ways. I tend to point to &lt;a href="http://www.springone2gx.com/blog/scott_leberknight/2008/09/the_n_matchers_expected_m_recorded_problem_in_easymock">this article&lt;/a> as a good description of how to understand what is going on when this message is given. There is an interesting corner case that I feel needs to be explored as I&amp;rsquo;ve just wasted an hour trying to figure it out.&lt;/p>
&lt;p>Consider the following code sample.&lt;/p>
&lt;div class="highlight-container">

 &lt;button class="copy-code-btn outline">Copy&lt;/button>

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">testSomethingBasic&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Thing myThing &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Thing(EasyMock.&lt;span style="color:#a6e22e">isA&lt;/span>(Whatever.&lt;span style="color:#a6e22e">class&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// do more stuff in the test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">testSomethingElse&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IJobber myJobber &lt;span style="color:#f92672">=&lt;/span> EasyMock.&lt;span style="color:#a6e22e">createMock&lt;/span>(IJobber.&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> EasyMock.&lt;span style="color:#a6e22e">expect&lt;/span>(myJobber.&lt;span style="color:#a6e22e">doStuff&lt;/span>()).&lt;span style="color:#a6e22e">andReturn&lt;/span>(&lt;span style="color:#66d9ef">null&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// do more stuff in the test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>The thing to notice is that &lt;em>isA(..)&lt;/em> was used on a non-mock object then used again on a mock object. The problem here is that EasyMock will record that you created a matcher (ie. isA(Whatever.class)) that was never used then will record that you created another one that you did use. You&amp;rsquo;ll get an error to the nature of &amp;ldquo;1 matcher expected, 2 recorded&amp;rdquo;.&lt;/p></description></item><item><title>JavaMail in OSGi</title><link>https://thecarlhall.github.io/post/javamail-in-osgi/</link><pubDate>Tue, 27 Oct 2009 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/javamail-in-osgi/</guid><description>&lt;h2 id="unsupporteddatatypeexception">UnsupportedDataTypeException&lt;/h2>
&lt;p>Sun decided ages ago that JavaMail and the Java Activation Framework should be released as separate artifacts and no one really cared. If you need JavaMail, you knew to also include JAF as Sun&amp;rsquo;s JavaMail page also told what version of JAF to use. Using this same approach, I created and deployed separate bundles for javax.activation and javax.mail. As soon as I tried to send the first test email, I found trouble. The most basic of email content types, text/plain, could not be sent.&lt;/p></description></item><item><title>JCR Properties and Mixins</title><link>https://thecarlhall.github.io/post/jcr-properties-and-mixins/</link><pubDate>Mon, 16 Mar 2009 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/jcr-properties-and-mixins/</guid><description>&lt;p>The more I learn about &lt;a href="http://en.wikipedia.org/wiki/Content_repository_API_for_Java">JCR&lt;/a> the more I realize I need to learn about JCR. Today&amp;rsquo;s lesson: adding any property to an nt:file node.&lt;/p>
&lt;p>In k2, we use nt:file as the node type for most everything we store especially anything stored by the user. There comes a time though when the node needs to have more characteristics than nt:file implies. This is where mixins come in handy. For more on mixins in general, read the 1st and 4th paragraphs of the &lt;a href="http://en.wikipedia.org/wiki/Mixins">wikipedia article&lt;/a>.&lt;/p></description></item><item><title>Follow through less</title><link>https://thecarlhall.github.io/post/follow-through-less/</link><pubDate>Mon, 02 Feb 2009 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/follow-through-less/</guid><description>&lt;p>For linux users, there&amp;rsquo;s a huge toolbox of things out there to allow us to perform our job more efficiently. With so many tools, there&amp;rsquo;s bound to be some overlap and while some of that overlap is perturbing, some of it is really useful! I already maintain &lt;a href="http://follow.sf.net">a project for following log files&lt;/a> but this is such a common need that other projects have implemented the same functionality.&lt;/p>
&lt;p>I use &amp;rsquo;less&amp;rsquo; whenever I need to quickly take a look through something or keep something from blowing past me in some long output. It&amp;rsquo;s recently been brought to my attention that not only will &amp;rsquo;less&amp;rsquo; allow me to page the contents of something, it will also actively follow something. When you&amp;rsquo;re in &amp;rsquo;less&amp;rsquo; just press &amp;lsquo;F&amp;rsquo; (uppercase F) and you&amp;rsquo;ll be following right along. Use Ctrl+c to stop following and go back to a standard &amp;rsquo;less&amp;rsquo; session. Pretty cool, huh?&lt;/p></description></item></channel></rss>
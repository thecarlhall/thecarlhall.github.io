<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Osgi on Carlibrated!</title><link>https://thecarlhall.github.io/tags/osgi/</link><description>Recent content in Osgi on Carlibrated!</description><generator>Hugo</generator><language>en</language><managingEditor>carl@halls.farm (Carl Hall)</managingEditor><webMaster>carl@halls.farm (Carl Hall)</webMaster><lastBuildDate>Thu, 19 Jan 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://thecarlhall.github.io/tags/osgi/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding the 'unresolved constraint', 'missing requirement' message from Apache Felix</title><link>https://thecarlhall.github.io/post/understanding-the-unresolved-constraint-missing-resource-message-from-apache-felix/</link><pubDate>Thu, 19 Jan 2012 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/understanding-the-unresolved-constraint-missing-resource-message-from-apache-felix/</guid><description>&lt;p>It&amp;rsquo;s pretty common while developing an OSGi bundle that your imports and exports won&amp;rsquo;t quite match what you need or what exists in the server you&amp;rsquo;re deploying to. This can show up as &lt;code>NoClassDefFoundError&lt;/code>, &lt;code>ClassNotFoundException&lt;/code> or as log output in a stacktrace from bundle resolution. Hall, Pauls, McCullough and Savage did a great job of covering NCDFE and CNFE in &lt;a href="http://www.manning.com/hall/" title="OSGi In Action">&amp;ldquo;OSGi In Action&amp;rdquo;&lt;/a> (chapter 8), let&amp;rsquo;s take a look at figuring out what the bundle resolution stacktrace is telling us. &lt;em>(I make nothing from the sales of &amp;ldquo;OSGi In Action&amp;rdquo; and suggest it to anyone interested in OSGi.)&lt;/em>&lt;/p></description></item><item><title>When To Immediately Activate An OSGi Component</title><link>https://thecarlhall.github.io/post/when-to-immediately-activate-an-osgi-component/</link><pubDate>Fri, 04 Feb 2011 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/when-to-immediately-activate-an-osgi-component/</guid><description>&lt;p>OSGi has a fantastic feature for immediate components &lt;a href="https://thecarlhall.github.io/post/when-to-immediately-activate-an-osgi-component/#1_osgi">[1]&lt;/a> and delayed componentsÂ &lt;a href="https://thecarlhall.github.io/post/when-to-immediately-activate-an-osgi-component/#2_osgi">[2]&lt;/a>. This allows components to delay their possibly expensive activation until the component is first accessed. At the very least it allows the OSGi platform to consume resources as needed. No sense is sucking up those server resources for something that can wait.&lt;/p>
&lt;p>As developers start their adventure into OSGi, I&amp;rsquo;ve noticed a pattern creeping up that I&amp;rsquo;m not sure folks are aware of: j_ust because you like your component doesn&amp;rsquo;t mean it needs to start immediately._ Unless your component has something it needs to do before other components can do their work, there&amp;rsquo;s little need to start a component immediately. A lot of times, the work can be moved into the bundle activator or is fine being delayed.&lt;/p></description></item><item><title>Set OSGi Service Reference Target through Configuration</title><link>https://thecarlhall.github.io/post/set-osgi-service-reference-target-through-configuration/</link><pubDate>Sun, 06 Jun 2010 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/set-osgi-service-reference-target-through-configuration/</guid><description>&lt;p>Passing properties into a component or component factory is pretty integral to OSGi.&lt;/p>
&lt;p>A property can be a scalar or list of values.&lt;/p>
&lt;div class="highlight-container">

 &lt;button class="copy-code-btn outline">Copy&lt;/button>

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Component&lt;/span>(configurationFactory &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, policy &lt;span style="color:#f92672">=&lt;/span> ConfigurationPolicy.&lt;span style="color:#a6e22e">REQUIRE&lt;/span>) &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">GreatExample&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String DEFAULT_VALUE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;someVal&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Property&lt;/span>(value &lt;span style="color:#f92672">=&lt;/span> DEFAULT_VALUE) &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String PROP_SOME_VAL &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;prop.some.val&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> String someVal;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Property&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String PROP_SOME_LIST &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;prop.some.list&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> someList;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Reference&lt;/span> GreatService greatService;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// later in the activate method&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">activate&lt;/span>(Map&lt;span style="color:#f92672">&amp;lt;?&lt;/span>, &lt;span style="color:#f92672">?&amp;gt;&lt;/span> props) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// do work to get properties and setting locally if needed.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// For a good reference of how to properly retrieve properties&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// take a look at&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// http://svn.apache.org/viewvc/sling/trunk/bundles/commons/osgi/src/main/java/org/apache/sling/commons/osgi/OsgiUtil.java?view=markup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>The above example is terribly terse but the idea is pretty obvious. Now, from this, a more complex case can be built.&lt;/p></description></item><item><title>JavaMail in OSGi</title><link>https://thecarlhall.github.io/post/javamail-in-osgi/</link><pubDate>Tue, 27 Oct 2009 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/javamail-in-osgi/</guid><description>&lt;h2 id="unsupporteddatatypeexception">UnsupportedDataTypeException&lt;/h2>
&lt;p>Sun decided ages ago that JavaMail and the Java Activation Framework should be released as separate artifacts and no one really cared. If you need JavaMail, you knew to also include JAF as Sun&amp;rsquo;s JavaMail page also told what version of JAF to use. Using this same approach, I created and deployed separate bundles for javax.activation and javax.mail. As soon as I tried to send the first test email, I found trouble. The most basic of email content types, text/plain, could not be sent.&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Carlibrated!</title><link>https://thecarlhall.github.io/post/</link><description>Recent content in Posts on Carlibrated!</description><generator>Hugo</generator><language>en</language><managingEditor>carl@halls.farm (Carl Hall)</managingEditor><webMaster>carl@halls.farm (Carl Hall)</webMaster><lastBuildDate>Sun, 15 Nov 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://thecarlhall.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Requiring External Resources Before Attempting JUnit Tests</title><link>https://thecarlhall.github.io/post/requiring-external-resources-before-attempting-junit-tests/</link><pubDate>Sun, 15 Nov 2015 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/requiring-external-resources-before-attempting-junit-tests/</guid><description>&lt;p>If you have an integration test that requires external resources to be available, like &lt;a href="https://thecarlhall.wordpress.com/2015/11/14/integration-testing-with-dynamodb-locally/">a local DynamoDB server&lt;/a>, that test should be skipped rather than fail when the resources aren&amp;rsquo;t there. In JUnit, this can be accomplished by throwing an &lt;code>AssumptionViolatedException&lt;/code> from an &lt;code>@BeforeClass&lt;/code> method, or better yet, with reusable &lt;code>ClassRule&lt;/code>s.&lt;/p></description></item><item><title>Integration Testing with DynamoDB Locally</title><link>https://thecarlhall.github.io/post/integration-testing-with-dynamodb-locally/</link><pubDate>Sat, 14 Nov 2015 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/integration-testing-with-dynamodb-locally/</guid><description>&lt;p>One of the really nice things about using DynamoDB to back an application is the ability to write integration tests that have a good test server without trying to mimic DynamoDB yourself. &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tools.DynamoDBLocal.html#Tools.DynamoDBLocal.DownloadingAndRunning">DynamoDB_Local is available from AWS&lt;/a> and is easily incorporated into a Maven build. Take a look through the documentation for &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tools.DynamoDBLocal.html">running DynamoDB on Your Computer&lt;/a> for the parameters available.&lt;/p></description></item><item><title>Erlang Map/Reduce Job in Riak using a Ruby Client</title><link>https://thecarlhall.github.io/post/erlang-mapreduce-job-in-riak-using-a-ruby-client/</link><pubDate>Mon, 11 Feb 2013 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/erlang-mapreduce-job-in-riak-using-a-ruby-client/</guid><description>&lt;p>&lt;em>Note: I am horrible at Erlang, but have figured out enough to construct a Map/Reduce job. Hopefully these notes serve as more than a warning.&lt;/em>&lt;/p>
&lt;p>It&amp;rsquo;s rarely possible to know every way you will want to access your data. Riak has secondary indices (2i) but if you don&amp;rsquo;t have one that represents what you want to query, it can be time consuming to populate one of these when you have a lot of documents. Ad-hoc queries are rarely where a database will shine, but when you have a one-off job, sometimes Map/Reduce is the only option you have.&lt;/p></description></item><item><title>Find activate-immediately services that lack an activate method</title><link>https://thecarlhall.github.io/post/find-activate-immediately-services-that-lack-an-activate-method/</link><pubDate>Mon, 30 Jul 2012 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/find-activate-immediately-services-that-lack-an-activate-method/</guid><description>&lt;p>Immediate service activation in OSGi can be tricky but there are &lt;a href="http://thecarlhall.wordpress.com/2011/02/04/when-to-immediately-activate-an-osgi-component/" title="some basic rules to consider">some basic rules to consider&lt;/a>. Another point to think about is when a service doesn&amp;rsquo;t contain an activate method. The code base I work in uses Felix&amp;rsquo;s SCR annotations which makes this search pretty concise. I also assume that the code is in git. If your code isn&amp;rsquo;t, you should be able to replace &lt;code>git&lt;/code> with &lt;code>find &amp;lt;dir&amp;gt; -type f -exec &amp;lt;grep-fu here&amp;gt;&lt;/code>.&lt;/p></description></item><item><title>Understanding the ‘unresolved constraint’, ‘missing requirement’ message from Apache Felix Pt. 2</title><link>https://thecarlhall.github.io/post/understanding-the-unresolved-constraint-missing-requirement-message-from-apache-felix-pt-2/</link><pubDate>Thu, 12 Jul 2012 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/understanding-the-unresolved-constraint-missing-requirement-message-from-apache-felix-pt-2/</guid><description>&lt;p>We previously took a look at &lt;a href="http://thecarlhall.wordpress.com/2012/01/19/understanding-the-unresolved-constraint-missing-resource-message-from-apache-felix/" title="Felix&amp;#39;s unresolved contract message">Felix&amp;rsquo;s unresolved constraint message&lt;/a>. I started testing with Felix 4.0.2 today and realized the output for an unresolved constraint has changed a bit.&lt;/p>
&lt;div class="highlight-container">

 &lt;button class="copy-code-btn outline">Copy&lt;/button>

 
 &lt;pre tabindex="0">&lt;code>ERROR: Bundle org.sakaiproject.nakamura.world [76] Error starting file:bundles/org.sakaiproject.nakamura.world_1.4.0.SNAPSHOT.jar (org.osgi.framework.BundleException: Unresolved constraint in bundle org.sakaiproject.nakamura.world [76]: Unable to resolve 76.0: missing requirement [76.0] osgi.wiring.package; (&amp;amp;amp;(osgi.wiring.package=javax.servlet)(version&amp;amp;gt;=3.0.0)))
11.07.2012 17:01:43.297 *ERROR* [FelixDispatchQueue] org.sakaiproject.nakamura.world FrameworkEvent ERROR (org.osgi.framework.BundleException: Unresolved constraint in bundle org.sakaiproject.nakamura.world [76]: Unable to resolve 76.0: missing requirement [76.0] osgi.wiring.package; (&amp;amp;amp;(osgi.wiring.package=javax.servlet)(version&amp;amp;gt;=3.0.0))) org.osgi.framework.BundleException: Unresolved constraint in bundle org.sakaiproject.nakamura.world [76]: Unable to resolve 76.0: missing requirement [76.0] osgi.wiring.package; (&amp;amp;amp;(osgi.wiring.package=javax.servlet)(version&amp;amp;gt;=3.0.0))
 at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:3826)
 at org.apache.felix.framework.Felix.startBundle(Felix.java:1868)
 at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1191)
 at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:295)
 at java.lang.Thread.run(Thread.java:679)&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>We have the same unresolved constraint..missing requirement as before but the part we&amp;rsquo;re interested in has changed a bit. Let&amp;rsquo;s break apart that first message.&lt;/p></description></item><item><title>Getting started with Pax Runner</title><link>https://thecarlhall.github.io/post/getting-started-with-pax-runner/</link><pubDate>Wed, 11 Jul 2012 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/getting-started-with-pax-runner/</guid><description>&lt;p>After fighting through a &lt;a href="https://source.sakaiproject.org/contrib//cans/cans_AA/trunk/dist/src/main/assembly/bin.xml" title="Maven assembly for a small project">Maven assembly for a small project&lt;/a>, I just couldn&amp;rsquo;t take that headache again. I&amp;rsquo;ve used &lt;a href="http://sling.apache.org/site/maven-launchpad-plugin.html" title="Apache Sling&amp;#39;s Maven Launchpad Plugin">Apache Sling&amp;rsquo;s Maven Launchpad Plugin&lt;/a> to put together a standalone OSGi server but Launchpad doesn&amp;rsquo;t allow you to pick which OSGi container you deploy to or what version of Felix gets used. I&amp;rsquo;ve started working with &lt;a href="http://team.ops4j.org/wiki/display/paxrunner/Pax&amp;#43;Runner" title="Pax Runner">Pax Runner&lt;/a> because a) it looks pretty nifty, b) those Pax folks are doing great stuff for the OSGi deployers out there.&lt;/p>
&lt;p>&lt;a href="http://team.ops4j.org/wiki/display/paxrunner/Pax&amp;#43;Runner" title="Pax Runner">Pax Runner&lt;/a> has a few sweet features I&amp;rsquo;m really digging right now.&lt;/p></description></item><item><title>Understanding the 'unresolved constraint', 'missing requirement' message from Apache Felix</title><link>https://thecarlhall.github.io/post/understanding-the-unresolved-constraint-missing-resource-message-from-apache-felix/</link><pubDate>Thu, 19 Jan 2012 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/understanding-the-unresolved-constraint-missing-resource-message-from-apache-felix/</guid><description>&lt;p>It&amp;rsquo;s pretty common while developing an OSGi bundle that your imports and exports won&amp;rsquo;t quite match what you need or what exists in the server you&amp;rsquo;re deploying to. This can show up as &lt;code>NoClassDefFoundError&lt;/code>, &lt;code>ClassNotFoundException&lt;/code> or as log output in a stacktrace from bundle resolution. Hall, Pauls, McCullough and Savage did a great job of covering NCDFE and CNFE in &lt;a href="http://www.manning.com/hall/" title="OSGi In Action">&amp;ldquo;OSGi In Action&amp;rdquo;&lt;/a> (chapter 8), let&amp;rsquo;s take a look at figuring out what the bundle resolution stacktrace is telling us. &lt;em>(I make nothing from the sales of &amp;ldquo;OSGi In Action&amp;rdquo; and suggest it to anyone interested in OSGi.)&lt;/em>&lt;/p></description></item><item><title>Using pygraphviz to plot OSGi bundle dependencies</title><link>https://thecarlhall.github.io/post/using-pygraphviz-to-plot-osgi-bundle-dependencies/</link><pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/using-pygraphviz-to-plot-osgi-bundle-dependencies/</guid><description>&lt;p>I&amp;rsquo;ve been working on an OSGi project for the last few years. As with any project, evolutionary changes will eventually require some cleanup. As new bundles have been added over time, the graph of dependencies is starting to get unwieldy in places. Even with good management of these dependencies, a nice visual layout of things can really help you see how your bundles are interconnected and give you the power to start separating some connections if you graph starts to hit cyclical dependencies.&lt;/p></description></item><item><title>Committer Status on Apache Sling</title><link>https://thecarlhall.github.io/post/committer-status-on-apache-sling/</link><pubDate>Wed, 16 Feb 2011 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/committer-status-on-apache-sling/</guid><description>&lt;p>I woke up this morning to the fantastic news that I&amp;rsquo;ve been offered committer status on Apache Sling! I graciously and excitedly accepted the opportunity to become an Apache committer. The various points of processing are in motion, so expect to see more Sling posts from me as I get ramped up into being a more productive member of Apache Sling.&lt;/p></description></item><item><title>Basics of OSGi and Declarative Services</title><link>https://thecarlhall.github.io/post/basics-of-osgi-and-declarative-services/</link><pubDate>Thu, 10 Feb 2011 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/basics-of-osgi-and-declarative-services/</guid><description>&lt;p>This is a slide deck for a talk I gave at the Sakai 2010 conference in lovely Denver, Colorado. The title to the talk was &amp;ldquo;Using OSGi in Nakamura&amp;rdquo; which was my original intention, but after reviewing the slides I seemed to have given a talk about the basics of OSGi. Good information under a wrong marquee.&lt;/p>
&lt;p>No matter the intention, I found today that I needed to refer to the slides for setting up an activator, so I&amp;rsquo;m reposting it here to give myself and hopefully others faster access. Be on the lookout for a repeat performance of this presentation at the Sakai 2011 conference in Los Angeles. I might even try to show it around a bit once the European conference is announced.&lt;/p></description></item><item><title>When To Immediately Activate An OSGi Component</title><link>https://thecarlhall.github.io/post/when-to-immediately-activate-an-osgi-component/</link><pubDate>Fri, 04 Feb 2011 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/when-to-immediately-activate-an-osgi-component/</guid><description>&lt;p>OSGi has a fantastic feature for immediate components &lt;a href="https://thecarlhall.github.io/post/when-to-immediately-activate-an-osgi-component/#1_osgi">[1]&lt;/a> and delayed components &lt;a href="https://thecarlhall.github.io/post/when-to-immediately-activate-an-osgi-component/#2_osgi">[2]&lt;/a>. This allows components to delay their possibly expensive activation until the component is first accessed. At the very least it allows the OSGi platform to consume resources as needed. No sense is sucking up those server resources for something that can wait.&lt;/p>
&lt;p>As developers start their adventure into OSGi, I&amp;rsquo;ve noticed a pattern creeping up that I&amp;rsquo;m not sure folks are aware of: j_ust because you like your component doesn&amp;rsquo;t mean it needs to start immediately._ Unless your component has something it needs to do before other components can do their work, there&amp;rsquo;s little need to start a component immediately. A lot of times, the work can be moved into the bundle activator or is fine being delayed.&lt;/p></description></item><item><title>LDAP Authentication &amp;amp; Authorization Dissected and Digested</title><link>https://thecarlhall.github.io/post/ldap-authentication-authorization-dissected-and-digested/</link><pubDate>Tue, 04 Jan 2011 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/ldap-authentication-authorization-dissected-and-digested/</guid><description>&lt;p>LDAP is one of those things that I&amp;rsquo;ve integrated with a few times but never put enough energy into to really get the details or understand it much.  There&amp;rsquo;s always been someone I can bounce questions off of and thankfully those people were available again as I started working out the details of performing LDAP authentication.&lt;/p>
&lt;p>The steps below are general enough to be used by anyone and will hopefully shed some light into the steps performed in LDAP authentication.  The process below also includes some steps for authorization.&lt;/p></description></item><item><title>Setting Up RVM, Ruby, Gem and Rails on Ubuntu</title><link>https://thecarlhall.github.io/post/setting-up-rvm-ruby-gem-and-rails-on-ubuntu/</link><pubDate>Tue, 19 Oct 2010 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/setting-up-rvm-ruby-gem-and-rails-on-ubuntu/</guid><description>&lt;p>&lt;strong>This is centered on Ubuntu only because aptitude is used once. If you&amp;rsquo;re comfortable with your package manager feel free to replace the aptitude command with your local command.&lt;/strong>&lt;/p>
&lt;p>I&amp;rsquo;m beginning to dig deeper into ruby, rails and the whole suite of tools available for them and have hit my knee on several things along the way. I&amp;rsquo;m no stranger to downloading things to download things to do things; I&amp;rsquo;ve been doing that in Java since 1996. I&amp;rsquo;ve also been kicking the tires on Ubuntu sense back before they got their naming scheme together and Debian even before that. I totally dig the Debian/Ubuntu way of install by deb packages. But with ruby, like Java, I feel it is best setup a machine by minimizing the use of apt (apt-get, aptitude, etc) and downloading the tools you need directly. I don&amp;rsquo;t let aptitude install Eclipse, Xalan, servlet-api or any of the other tools/libraries I use on top of the JVM and this is the route I have ended up going with when setting up ruby as well.&lt;/p></description></item><item><title>Setting "quoted-printable" In A commons-email Body Part</title><link>https://thecarlhall.github.io/post/setting-quoted-printable-in-a-commons-email-body-part/</link><pubDate>Thu, 02 Sep 2010 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/setting-quoted-printable-in-a-commons-email-body-part/</guid><description>&lt;p>I&amp;rsquo;m revamping the inner workings of a mail sending tool to use &lt;a href="http://commons.apache.org/email">commons-email&lt;/a>.  I wanted to make sure I set the text body parts to the appropriate transfer encoding to allow for non-ASCII languages to be used. My failed attempts and final success are documented below.&lt;/p>
&lt;h3 id="1-bad-set-message-content-transfer-encoding">1. [bad] Set Message &amp;lsquo;Content-transfer-encoding&amp;rsquo;&lt;/h3>
&lt;p>The problem with this is that everything in the message is processed as &amp;ldquo;quoted-printable&amp;rdquo; which will turn your multipart boundaries into useless wastes of text.&lt;/p></description></item><item><title>Getting Thrift into Maven Locally</title><link>https://thecarlhall.github.io/post/getting-thrift-into-maven-locally/</link><pubDate>Fri, 27 Aug 2010 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/getting-thrift-into-maven-locally/</guid><description>&lt;p>I spent the better part of a morning trying to figure out how to get Thrift to be available in a Maven repository for a project I&amp;rsquo;m working on. Yes, I know there&amp;rsquo;s &lt;a href="https://issues.apache.org/jira/browse/THRIFT-363">a JIRA issue for this&lt;/a> but the comments are not clear and it&amp;rsquo;s more tailored towards publishing in the central Apache repository. Also, I tried using &amp;lsquo;ant publish&amp;rsquo; and got &amp;ldquo;Execute failed: java.io.IOException: Cannot run program &amp;ldquo;../../compiler/cpp/thrift&amp;rdquo;: java.io.IOException: error=2, No such file or directory&amp;rdquo;. I don&amp;rsquo;t need that kind of problem installing a library nor do I want to build the whole Thrift library.&lt;/p></description></item><item><title>Find and Remove Files That Have Spaces In The Name</title><link>https://thecarlhall.github.io/post/find-and-remove-files-that-have-spaces-in-the-name/</link><pubDate>Fri, 09 Jul 2010 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/find-and-remove-files-that-have-spaces-in-the-name/</guid><description>&lt;p>Whenever I need this, it takes me seemingly forever to figure this out. Blog it!&lt;/p>
&lt;p>&amp;lsquo;find&amp;rsquo; is a great GNU utility for digging up files in directories. &amp;lsquo;rm&amp;rsquo; is a staple command for any linux user. Combining the two commands can be fun and powerful.&lt;/p>
&lt;div class="highlight-container">

 &lt;button class="copy-code-btn outline">Copy&lt;/button>

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>find /home/luser -type f -name &lt;span style="color:#e6db74">&amp;#39;\*.mpg&amp;#39;&lt;/span> -exec rm -f &lt;span style="color:#f92672">{}&lt;/span> &lt;span style="color:#ae81ff">\\&lt;/span>;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>The above command calls &lt;code>rm -f&lt;/code> for each file. A faster version of this uses xargs for a single call.&lt;/p></description></item><item><title>Set OSGi Service Reference Target through Configuration</title><link>https://thecarlhall.github.io/post/set-osgi-service-reference-target-through-configuration/</link><pubDate>Sun, 06 Jun 2010 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/set-osgi-service-reference-target-through-configuration/</guid><description>&lt;p>Passing properties into a component or component factory is pretty integral to OSGi.&lt;/p>
&lt;p>A property can be a scalar or list of values.&lt;/p>
&lt;div class="highlight-container">

 &lt;button class="copy-code-btn outline">Copy&lt;/button>

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Component&lt;/span>(configurationFactory &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, policy &lt;span style="color:#f92672">=&lt;/span> ConfigurationPolicy.&lt;span style="color:#a6e22e">REQUIRE&lt;/span>) &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">GreatExample&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String DEFAULT_VALUE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;someVal&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Property&lt;/span>(value &lt;span style="color:#f92672">=&lt;/span> DEFAULT_VALUE) &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String PROP_SOME_VAL &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;prop.some.val&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> String someVal;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Property&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String PROP_SOME_LIST &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;prop.some.list&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> someList;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Reference&lt;/span> GreatService greatService;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// later in the activate method&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">activate&lt;/span>(Map&lt;span style="color:#f92672">&amp;lt;?&lt;/span>, &lt;span style="color:#f92672">?&amp;gt;&lt;/span> props) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// do work to get properties and setting locally if needed.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// For a good reference of how to properly retrieve properties&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// take a look at&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// http://svn.apache.org/viewvc/sling/trunk/bundles/commons/osgi/src/main/java/org/apache/sling/commons/osgi/OsgiUtil.java?view=markup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>The above example is terribly terse but the idea is pretty obvious. Now, from this, a more complex case can be built.&lt;/p></description></item><item><title>IntelliJ IDEA shortcut in linux</title><link>https://thecarlhall.github.io/post/intellij-idea-shortcut-in-linux/</link><pubDate>Sat, 10 Apr 2010 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/intellij-idea-shortcut-in-linux/</guid><description>&lt;p>After a lot of digging around, I finally came across &lt;a href="http://www.cs.bgu.ac.il/~gwiener/programming/how-to-make-intellij-idea-8-usable-on-linux/">this blog entry&lt;/a> telling how to make a shortcut to IDEA work in linux. In short, change your shortcut to something like the following:&lt;/p>
&lt;div class="highlight-container">

 &lt;button class="copy-code-btn outline">Copy&lt;/button>

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/bin/sh -c &lt;span style="color:#e6db74">&amp;#34;export JDK_HOME=/usr/lib/jvm/java-6-sun &amp;amp;&amp;amp; /opt/IntelliJIdea8/bin/idea.sh&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>Voila! Victory is mine!&lt;/p></description></item><item><title>keytool is Strict</title><link>https://thecarlhall.github.io/post/keychain-is-strict/</link><pubDate>Mon, 05 Apr 2010 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/keychain-is-strict/</guid><description>&lt;p>Let&amp;rsquo;s say you are setting up a connection to an LDAP server and need to get your security bits in place.  To get the certificate chain from the server, you may do something like this:&lt;/p>
&lt;blockquote>
&lt;p>openssl s_client -showcerts -connect dir.example.com:636 &amp;gt; cert_chain.pem&lt;/p>
&lt;/blockquote>
&lt;p>Now with the output of that, you want to create or add to a keystore. That command looks like this:&lt;/p>
&lt;blockquote>
&lt;p>keytool -import -storetype jks -keystore dir_example.jks -storepass dir-example -file cert_chain.pem -alias ldap-ca -noprompt&lt;/p></description></item><item><title>Unit Testing with HttpClient's LocalTestServer</title><link>https://thecarlhall.github.io/post/unit-testing-with-httpclients-localtestserver/</link><pubDate>Thu, 25 Mar 2010 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/unit-testing-with-httpclients-localtestserver/</guid><description>&lt;p>When unit testing code that uses HttpClient, it can get a bit tricky to not test against a active web server.  There are a couple of approaches to this to keep your tests at the unit level.&lt;/p>
&lt;ol>
&lt;li>Mock and inject HttpClient &amp;ndash; While this is certainly possible and gives you complete control, it can take a lot of mocking and get tedious quite quickly.&lt;/li>
&lt;li>Use LocalTestServer from HttpClient &amp;ndash; This is the point of this post and I will now explain.&lt;/li>
&lt;/ol>
&lt;p>Let&amp;rsquo;s take a look at the basic setup for getting this test server up.&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Carlibrated on Carlibrated!</title><link>https://thecarlhall.github.io/</link><description>Recent content in Carlibrated on Carlibrated!</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>carl@halls.farm (Carl Hall)</managingEditor><webMaster>carl@halls.farm (Carl Hall)</webMaster><lastBuildDate>Tue, 24 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://thecarlhall.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>https://thecarlhall.github.io/about/</link><pubDate>Tue, 24 Dec 2024 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/about/</guid><description>&lt;p>&lt;img src="http://0.gravatar.com/avatar/18aed3fab9203b50799919212be5f600" alt="Carl!">&lt;/p>
&lt;p>Carl was a transplant to Portland, OR from Georgia, but he came home a f ew years ago.  He was a Software Development Manager at Amazon Web Services, too, but he left that for Solutions Architecture at Databricks.  His free time is still spent chasing his son, sometimes playing guitar, over-optimizing everything, and wondering where the time has gone.&lt;/p></description></item><item><title>Requiring External Resources Before Attempting JUnit Tests</title><link>https://thecarlhall.github.io/post/requiring-external-resources-before-attempting-junit-tests/</link><pubDate>Sun, 15 Nov 2015 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/requiring-external-resources-before-attempting-junit-tests/</guid><description>&lt;p>If you have an integration test that requires external resources to be available, like &lt;a href="https://thecarlhall.wordpress.com/2015/11/14/integration-testing-with-dynamodb-locally/">a local DynamoDB server&lt;/a>, that test should be skipped rather than fail when the resources aren&amp;rsquo;t there. In JUnit, this can be accomplished by throwing an &lt;code>AssumptionViolatedException&lt;/code> from an &lt;code>@BeforeClass&lt;/code> method, or better yet, with reusable &lt;code>ClassRule&lt;/code>s.&lt;/p>
&lt;p>A &lt;code>ClassRule&lt;/code> runs like an &lt;code>@BeforeClass&lt;/code> method; once before the entire suite of test methods in the class. &lt;code>@Rule&lt;/code> is analogous to &lt;code>@Before&lt;/code> and runs before each test method. In this case, we use the &lt;code>ClassRule&lt;/code> to check for resources along with preparing the use of them (see the call to &lt;code>.client()&lt;/code>). If the AWS client cannot connect to a local DynamoDB server, it will throw an &lt;code>AssumptionViolatedException&lt;/code> causing JUnit to mark the test class as &lt;code>skipped&lt;/code> rather than &lt;code>failed&lt;/code>.&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;pre tabindex="0">&lt;code>-------------------------------------------------------
 T E S T S
 -------------------------------------------------------
 Running DynamoDaoIT
 Tests run: 1, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.054 sec - in DynamoDaoIT
 Results :
 Tests run: 1, Failures: 0, Errors: 0, Skipped: 1&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.util.Properties;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.junit.Before;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.junit.ClassRule;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.junit.Test;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DynamoMappingsDaoIT&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> Properties CONFIG &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#75715e">// load your app test properties;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * This runs like an @BeforeClass method (@Rule is analogous to @Before). If the AWS
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * client cannot connect to a local DynamoDB server, it will throw an
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * AssumptionViolatedException causing JUnit to mark the test class as &amp;amp;lt;code&amp;amp;gt;skipped&amp;amp;lt;/code&amp;amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * rather than &amp;amp;lt;code&amp;amp;gt;failed&amp;amp;lt;/code&amp;amp;gt;.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@ClassRule&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> DynamoDbRule DYNAMO_DB_RULE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> DynamoDbRule().&lt;span style="color:#a6e22e">withLocalPort&lt;/span>(CONFIG.&lt;span style="color:#a6e22e">getString&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;dynamo.&lt;span style="color:#a6e22e">port&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> DynamoDAO dao;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Before&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setUp&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Create this here to give the class rule a chance to run first.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dao &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> DynamoDAO(CONFIG);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">shouldUseDynamo&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// test safely knowing that your dynamo client is connected&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappingDAO.&lt;span style="color:#a6e22e">find&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> assertNotNull(DYNAMO_DB_RULE.&lt;span style="color:#a6e22e">client&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> com.amazonaws.AmazonClientException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> com.amazonaws.ClientConfiguration;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> com.amazonaws.auth.AWSCredentials;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> com.amazonaws.auth.BasicAWSCredentials;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> com.google.common.base.Strings;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.junit.Assume;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.junit.rules.ExternalResource;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DynamoDbRule&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> ExternalResource {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> String endpoint &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;http:&lt;span style="color:#75715e">//localhost:8000&amp;amp;quot;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> String accessKeyId;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> String secretKey;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> maxRetry &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> AmazonDynamoDBClient client;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">DynamoDbRule&lt;/span>() { }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> DynamoDbRule &lt;span style="color:#a6e22e">withLocalPort&lt;/span>(&lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> port) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> withEndpoint(&lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;http:&lt;span style="color:#75715e">//localhost:&amp;amp;quot; + port);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> DynamoDbRule &lt;span style="color:#a6e22e">withEndpoint&lt;/span>(&lt;span style="color:#66d9ef">final&lt;/span> String endpoint) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">endpoint&lt;/span> &lt;span style="color:#f92672">=&lt;/span> endpoint;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> DynamoDbRule &lt;span style="color:#a6e22e">withAccessKeyId&lt;/span>(&lt;span style="color:#66d9ef">final&lt;/span> String accessKeyId) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">accessKeyId&lt;/span> &lt;span style="color:#f92672">=&lt;/span> accessKeyId;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> DynamoDbRule &lt;span style="color:#a6e22e">withSecretKey&lt;/span>(&lt;span style="color:#66d9ef">final&lt;/span> String secretKey) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">secretKey&lt;/span> &lt;span style="color:#f92672">=&lt;/span> secretKey;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> DynamoDbRule &lt;span style="color:#a6e22e">withMaxRetry&lt;/span>(&lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> maxRetry) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">maxRetry&lt;/span> &lt;span style="color:#f92672">=&lt;/span> maxRetry;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> AmazonDynamoDBClient &lt;span style="color:#a6e22e">client&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (client &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> IllegalStateException(&lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;Run &lt;span style="color:#a6e22e">before&lt;/span>() to create the client&lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> client;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">before&lt;/span>() &lt;span style="color:#66d9ef">throws&lt;/span> Throwable {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ClientConfiguration clientConfig &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ClientConfiguration().&lt;span style="color:#a6e22e">withMaxErrorRetry&lt;/span>(maxRetry);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (Strings.&lt;span style="color:#a6e22e">isNullOrEmpty&lt;/span>(accessKeyId) &lt;span style="color:#f92672">||&lt;/span> Strings.&lt;span style="color:#a6e22e">isNullOrEmpty&lt;/span>(secretKey)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> client &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> AmazonDynamoDBClient(clientConfig);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AWSCredentials creds &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> BasicAWSCredentials(accessKeyId, secretKey);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> client &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> AmazonDynamoDBClient(creds, clientConfig);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> client.&lt;span style="color:#a6e22e">setEndpoint&lt;/span>(endpoint);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> client.&lt;span style="color:#a6e22e">listTables&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">catch&lt;/span> (AmazonClientException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assume.&lt;span style="color:#a6e22e">assumeNoException&lt;/span>(e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div></description></item><item><title>Integration Testing with DynamoDB Locally</title><link>https://thecarlhall.github.io/post/integration-testing-with-dynamodb-locally/</link><pubDate>Sat, 14 Nov 2015 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/integration-testing-with-dynamodb-locally/</guid><description>&lt;p>One of the really nice things about using DynamoDB to back an application is the ability to write integration tests that have a good test server without trying to mimic DynamoDB yourself. &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tools.DynamoDBLocal.html#Tools.DynamoDBLocal.DownloadingAndRunning">DynamoDB_Local is available from AWS&lt;/a> and is easily incorporated into a Maven build. Take a look through the documentation for &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tools.DynamoDBLocal.html">running DynamoDB on Your Computer&lt;/a> for the parameters available.&lt;/p>
&lt;p>The general steps for adding this to your build are:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Download the DynamoDB Local artifact.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Reserve a local port for Dynamo to start on.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Start DynamoDB_Local just before integration tests are run.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use the failsafe plugin to run integration tests.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>The steps are covered in more technical detail in the pom.xml file below. Adding this to the build is the only thing necessary as this performs all the steps above and tears down the process afterwards.&lt;br>
&lt;script src="https://gist.github.com/thecarlhall/f4e8f425cb736938e1d2.js">&lt;/script>
&lt;/p></description></item><item><title>Erlang Map/Reduce Job in Riak using a Ruby Client</title><link>https://thecarlhall.github.io/post/erlang-mapreduce-job-in-riak-using-a-ruby-client/</link><pubDate>Mon, 11 Feb 2013 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/erlang-mapreduce-job-in-riak-using-a-ruby-client/</guid><description>&lt;p>&lt;em>Note: I am horrible at Erlang, but have figured out enough to construct a Map/Reduce job. Hopefully these notes serve as more than a warning.&lt;/em>&lt;/p>
&lt;p>It&amp;rsquo;s rarely possible to know every way you will want to access your data. Riak has secondary indices (2i) but if you don&amp;rsquo;t have one that represents what you want to query, it can be time consuming to populate one of these when you have a lot of documents. Ad-hoc queries are rarely where a database will shine, but when you have a one-off job, sometimes Map/Reduce is the only option you have.&lt;/p>
&lt;p>In the example code below, I&amp;rsquo;m using the &lt;a href="https://github.com/basho/riak-ruby-client">Riak Ruby Client&lt;/a> to talk to a Riak ring. I&amp;rsquo;m getting my client from &lt;a href="https://github.com/basho/ripple">Ripple&lt;/a> because it is already setup by the time this method is called. Create a client in whatever way makes sense for your application. Look below the code example for some line-specific notes.&lt;/p>
&lt;script src="https://gist.github.com/thecarlhall/4751334.js">&lt;/script>
&lt;h3 id="erlang-notes">Erlang Notes&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>lines 17, 38&lt;/strong> - Define the language of the &lt;code>map&lt;/code> and &lt;code>reduce&lt;/code> phases, respectively. Yes, this means you can use a different language in the &lt;code>map&lt;/code> phase than you do in the &lt;code>reduce&lt;/code> phase (e.g. &lt;code>map: erlang&lt;/code>, &lt;code>reduce: javascript&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>lines 19-35, 40-42&lt;/strong> - This is the real meat of the processing puzzle. When defining Erlang functions here, you have to use anonymous functions which start with &lt;code>fun&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>line 19&lt;/strong> - Defining these functions requires some knowledge of what&amp;rsquo;s to be passed in, so let&amp;rsquo;s look at what the arguments are&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Obj&lt;/strong> - Riak object/document as retrieved from the bucket.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>_KeyData&lt;/strong> - Information about the document&amp;rsquo;s key.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>_Arg&lt;/strong> - Static argument passed by the caller into the &lt;code>map&lt;/code> phase.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>lines 20-21&lt;/strong> - Turn the Riak document into a structure. We store our data as json so we use &lt;code>mochijson:decode&lt;/code> to transform the data.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>lines 23-28&lt;/strong> - Define a function to help with picking the data that matches the supplied argument(s).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>lines 30-34&lt;/strong> - Use the supplied argument to filter the data we want. Return an empty array if the data doesn&amp;rsquo;t match our query.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>line 40&lt;/strong> - Again with the function definitions and arguments.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Values&lt;/strong> - Result from the map phase.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>_Arg&lt;/strong> - Static argument passed by the caller into the &lt;code>reduce&lt;/code> phase.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>line 41&lt;/strong> - Artificially limit the results by a supplied argument.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="general-processing-notes">General Processing Notes&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>line 49&lt;/strong> - Using a list of keys will help performance greatly. See below for suggestions on obtaining a list of keys.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>line 52&lt;/strong> - To help with VM memory, and to imitate so semblance of transactionality, I run things in batches.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>lines 54-56&lt;/strong> - This defines the job iteslf. The &lt;code>map&lt;/code> phase or the &lt;code>reduce&lt;/code> phase can be ommitted but not both. The &lt;code>keep&lt;/code> argument determines whether the documents from this phase are included in the final output. I tend to use &lt;code>keep=true&lt;/code> only on the last phase run (i.e. &lt;code>map&lt;/code> phase if no &lt;code>reduce&lt;/code>; &lt;code>reduce&lt;/code> phase otherwise)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>line 58&lt;/strong> - Add each &lt;code>bucket&lt;/code>/&lt;code>key&lt;/code> pair to the job. The key can be excluded specifying just the bucket but this will cause a full bucket scan. I&amp;rsquo;ve had problems with blowing out the VM memory when not specifying the keys and iterating a large bucket.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="obtaining-document-keys">Obtaining Document Keys&lt;/h3>
&lt;p>I get a list of keys independent of my map reduce job to take some of the overhead out of the MR job itself. I&amp;rsquo;ve used a couple of different methods to get a list of keys to process.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>&lt;strong>Query keys from an index&lt;/strong>.&lt;/strong> If you have an index you can lean on, it will cut down lots of overhead to query that index for keys to work through.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://docs.basho.com/riak/1.2.1/references/apis/http/HTTP-List-Keys/#Request">&lt;strong>Stream key list from the bucket&lt;/strong>&lt;/a>. This can take a while and add significant overhead to the ring, but is useful if you need all keys in the bucket. When streaming keys, the multipart response produces what looks like multiple documents. The pattern, &lt;code>{&amp;quot;keys&amp;quot;: [..]}&lt;/code>, will show up multiple times and require some massaging before it can be read by a JSON reader.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Given my ignorance of Erlang and Riak, I&amp;rsquo;m sure there are better ways to accomplish these same steps. I&amp;rsquo;ve performed the same work using JavaScript with like results, but JavaScript is handled outside of the Erlang VM and doesn&amp;rsquo;t tend to be as fast as Erlang. For M/R jobs that you will be running more than once, it is suggested to compile the Erlang functions and putting the libraries on the servers in the ring.&lt;/p>
&lt;p>At this point, I&amp;rsquo;m just parroting what I&amp;rsquo;ve heard and can only cause confusion saying more. Hopefully this is more helpful than confusing. Be sure to check #riak on Freenode for some really great people and help.&lt;/p></description></item><item><title>Find activate-immediately services that lack an activate method</title><link>https://thecarlhall.github.io/post/find-activate-immediately-services-that-lack-an-activate-method/</link><pubDate>Mon, 30 Jul 2012 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/find-activate-immediately-services-that-lack-an-activate-method/</guid><description>&lt;p>Immediate service activation in OSGi can be tricky but there are &lt;a href="http://thecarlhall.wordpress.com/2011/02/04/when-to-immediately-activate-an-osgi-component/" title="some basic rules to consider">some basic rules to consider&lt;/a>. Another point to think about is when a service doesn&amp;rsquo;t contain an activate method. The code base I work in uses Felix&amp;rsquo;s SCR annotations which makes this search pretty concise. I also assume that the code is in git. If your code isn&amp;rsquo;t, you should be able to replace &lt;code>git&lt;/code> with &lt;code>find &amp;lt;dir&amp;gt; -type f -exec &amp;lt;grep-fu here&amp;gt;&lt;/code>.&lt;/p>
&lt;h2 id="find-activate-immediately-services">Find activate-immediately services&lt;/h2>
&lt;p>Using a little git and grep-fu, we can find our services that activate immediately.&lt;/p>
&lt;p>&lt;code>git grep -l 'immediate[[:space:]]\?=[[:space:]]\?true'&lt;/code>&lt;/p>
&lt;p>The command below makes a few assumptions:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>We use SCR annotations that allow &lt;code>immediate = (true|false)&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We use &lt;code>immediate = true&lt;/code> almost never except in the &lt;code>@Component&lt;/code> annotation.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="find-services-that-have-an-activate-method">Find services that have an activate method&lt;/h2>
&lt;p>For our next trick, we&amp;rsquo;ll find the set of files that have an activate method as noted by the use of an &lt;code>@Activate&lt;/code> annotation.&lt;/p>
&lt;p>&lt;code>git grep -l '@Activate'&lt;/code>&lt;/p>
&lt;h2 id="find-the-intersection-of-activate-immediately-services-that-lack-an-activate-method">Find the intersection of activate-immediately services that lack an activate method&lt;/h2>
&lt;p>Now to the fun. With the information we&amp;rsquo;ve grepped above, we need the things that are in set 1 but &lt;em>not&lt;/em> in set 2. There&amp;rsquo;s a great little tool in linux called &lt;code>comm&lt;/code> that can help us with the set operations. It needs sorted data to work correctly, so we&amp;rsquo;ll dress up our previous commands and send them in.&lt;/p>
&lt;p>&lt;code>comm -23 &amp;amp;lt;(git grep -l 'immediate[[:space:]]\?=[[:space:]]\?true' | sort) &amp;amp;lt;(git grep -l '@Activate' | sort)&lt;/code>&lt;/p>
&lt;p>The &lt;code>-23&lt;/code> argument tells &lt;code>comm&lt;/code> that we want to suppress unique items from the second set (activate method list) and to suppress items that exist in both sets (immediate + activate). This leaves us with services that don&amp;rsquo;t have an activate method. If you want to see services that are immediate &lt;em>and&lt;/em> have an activate method, change the argument to &lt;code>-12&lt;/code>.&lt;/p></description></item><item><title>Understanding the ‘unresolved constraint’, ‘missing requirement’ message from Apache Felix Pt. 2</title><link>https://thecarlhall.github.io/post/understanding-the-unresolved-constraint-missing-requirement-message-from-apache-felix-pt-2/</link><pubDate>Thu, 12 Jul 2012 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/understanding-the-unresolved-constraint-missing-requirement-message-from-apache-felix-pt-2/</guid><description>&lt;p>We previously took a look at &lt;a href="http://thecarlhall.wordpress.com/2012/01/19/understanding-the-unresolved-constraint-missing-resource-message-from-apache-felix/" title="Felix&amp;#39;s unresolved contract message">Felix&amp;rsquo;s unresolved constraint message&lt;/a>. I started testing with Felix 4.0.2 today and realized the output for an unresolved constraint has changed a bit.&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;pre tabindex="0">&lt;code>ERROR: Bundle org.sakaiproject.nakamura.world [76] Error starting file:bundles/org.sakaiproject.nakamura.world_1.4.0.SNAPSHOT.jar (org.osgi.framework.BundleException: Unresolved constraint in bundle org.sakaiproject.nakamura.world [76]: Unable to resolve 76.0: missing requirement [76.0] osgi.wiring.package; (&amp;amp;amp;(osgi.wiring.package=javax.servlet)(version&amp;amp;gt;=3.0.0)))
11.07.2012 17:01:43.297 *ERROR* [FelixDispatchQueue] org.sakaiproject.nakamura.world FrameworkEvent ERROR (org.osgi.framework.BundleException: Unresolved constraint in bundle org.sakaiproject.nakamura.world [76]: Unable to resolve 76.0: missing requirement [76.0] osgi.wiring.package; (&amp;amp;amp;(osgi.wiring.package=javax.servlet)(version&amp;amp;gt;=3.0.0))) org.osgi.framework.BundleException: Unresolved constraint in bundle org.sakaiproject.nakamura.world [76]: Unable to resolve 76.0: missing requirement [76.0] osgi.wiring.package; (&amp;amp;amp;(osgi.wiring.package=javax.servlet)(version&amp;amp;gt;=3.0.0))
at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:3826)
at org.apache.felix.framework.Felix.startBundle(Felix.java:1868)
at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1191)
at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:295)
at java.lang.Thread.run(Thread.java:679)&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>We have the same unresolved constraint..missing requirement as before but the part we&amp;rsquo;re interested in has changed a bit. Let&amp;rsquo;s break apart that first message.&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;pre tabindex="0">&lt;code>(org.osgi.framework.BundleException: Unresolved constraint in bundle org.sakaiproject.nakamura.world [76]: Unable to resolve 76.0: missing requirement [76.0] osgi.wiring.package; (&amp;amp;amp;(osgi.wiring.package=javax.servlet)(version&amp;amp;gt;=3.0.0)))&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Given what we know from last time, the interesting bits above are:&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;pre tabindex="0">&lt;code>Unresolved constraint in bundle org.sakaiproject.nakamura.world [76]&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>This tells you what bundle had an issue trying to resolve a constraint. The next part is a bit less obvious but can be broken up.&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;pre tabindex="0">&lt;code>osgi.wiring.package; (&amp;amp;amp;(osgi.wiring.package=javax.servlet)(version&amp;amp;gt;=3.0.0)))&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>osgi.wiring.package looks pretty foreign, hu? Disregard that and you see &lt;code>javax.servlet&lt;/code> and &lt;code>version&amp;gt;=3.0.0&lt;/code>. Tada! That&amp;rsquo;s the good stuff. So, figure out where that bundle is that exports &lt;code>javax.servlet&amp;gt;=3.0.0&lt;/code> and you&amp;rsquo;re on your way. (Hint: maybe, &lt;code>javax.servlet:javax.servlet-api:3.0.0&lt;/code> or &lt;code>org.ops4j.pax.web:pax-web-jetty-bundle:2.0.1&lt;/code> is what you&amp;rsquo;re looking for.)&lt;/p></description></item><item><title>Getting started with Pax Runner</title><link>https://thecarlhall.github.io/post/getting-started-with-pax-runner/</link><pubDate>Wed, 11 Jul 2012 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/getting-started-with-pax-runner/</guid><description>&lt;p>After fighting through a &lt;a href="https://source.sakaiproject.org/contrib//cans/cans_AA/trunk/dist/src/main/assembly/bin.xml" title="Maven assembly for a small project">Maven assembly for a small project&lt;/a>, I just couldn&amp;rsquo;t take that headache again. I&amp;rsquo;ve used &lt;a href="http://sling.apache.org/site/maven-launchpad-plugin.html" title="Apache Sling&amp;#39;s Maven Launchpad Plugin">Apache Sling&amp;rsquo;s Maven Launchpad Plugin&lt;/a> to put together a standalone OSGi server but Launchpad doesn&amp;rsquo;t allow you to pick which OSGi container you deploy to or what version of Felix gets used. I&amp;rsquo;ve started working with &lt;a href="http://team.ops4j.org/wiki/display/paxrunner/Pax&amp;#43;Runner" title="Pax Runner">Pax Runner&lt;/a> because a) it looks pretty nifty, b) those Pax folks are doing great stuff for the OSGi deployers out there.&lt;/p>
&lt;p>&lt;a href="http://team.ops4j.org/wiki/display/paxrunner/Pax&amp;#43;Runner" title="Pax Runner">Pax Runner&lt;/a> has a few sweet features I&amp;rsquo;m really digging right now.&lt;/p>
&lt;h3 id="different-osgi-platforms-and-versions">Different OSGi platforms and versions&lt;/h3>
&lt;p>I generally develop on Apache Felix, but if I should be able to run in any other OSGi container, right? Well, to test that theory I can ask &lt;a href="http://team.ops4j.org/wiki/display/paxrunner/Pax&amp;#43;Runner" title="Pax Runner">Pax Runner&lt;/a> to load up my profile using a different platform (&lt;code>--platform&lt;/code>; defaults to &amp;lsquo;&lt;code>felix&lt;/code>&amp;rsquo;) and the version of that platform (&lt;code>--version&lt;/code>).&lt;/p>
&lt;p>If I want to test my setup with Equinox I just run:&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;pre tabindex="0">&lt;code>pax-run --platform=equinox awesome-profile.composite&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Knopflerfish you say?&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;pre tabindex="0">&lt;code>pax-run --platform=knopflerfish awesome-profile.composite&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>What about an older version of Felix? Easy!&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;pre tabindex="0">&lt;code>pax-run --platform=felix --version=3.0.8 awesome-profile.composite&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="deploy-multiple-profiles-and-build-composite-profiles">Deploy multiple profiles and build composite profiles&lt;/h3>
&lt;p>I plan to run my project with a single profile, but if you find the need to include other profiles it&amp;rsquo;s just another command line switch:&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;pre tabindex="0">&lt;code>pax-run --profiles=config,log awesome-profile.composite&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>&lt;em>&amp;ldquo;But I want a specific version of a profile.&amp;rdquo;&lt;/em> And you should! So use this:&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;pre tabindex="0">&lt;code>pax-run --profiles=config/1.0.0,log/1.2.0 awesome-profile.composite&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="profiles-whats-this-crazy-talk-you-speak">Profiles? What&amp;rsquo;s this crazy talk you speak?!&lt;/h3>
&lt;p>So, the root of all this chatter is Pax Runner Profiles. I can barely speak to the topic, but will attempt to anyway. (Don&amp;rsquo;t trust me; &lt;a href="http://team.ops4j.org/wiki/display/paxrunner/Advanced&amp;#43;profiles&amp;#43;topics" title="read the documentation">read the documentation&lt;/a>)&lt;/p>
&lt;p>A short glimpse into my profile file shows that I just include bundles that I know to live in a Maven repository:&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;pre tabindex="0">&lt;code>scan-bundle:mvn:commons-io/commons-io/1.4@1
scan-bundle:mvn:commons-fileupload/commons-fileupload/1.2.2@1
scan-bundle:mvn:commons-collections/commons-collections/3.2.1@1
scan-bundle:mvn:commons-lang/commons-lang/2.6@1
scan-bundle:mvn:commons-pool/commons-pool/1.5.6@1
scan-bundle:mvn:commons-codec/commons-codec/1.5@1&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>A quick explanation of these lines is simply:&lt;br>
&lt;code>scan-bundle:mvn:&amp;lt;groupId&amp;gt;/&amp;lt;artifactId&amp;gt;/&amp;lt;version&amp;gt;@&amp;lt;startLevel&amp;gt;&lt;/code>&lt;/p>
&lt;p>For those looking for more OSGi goodness, &lt;a href="http://team.ops4j.org/wiki/display/paxweb/Pax&amp;#43;Web" title="Pax Web">Pax Web&lt;/a> has really stepped up with the &lt;a href="http://team.ops4j.org/wiki/display/paxweb/Pax&amp;#43;Web&amp;#43;-&amp;#43;2.0.0" title="2.0.0 release">2.0.0 release&lt;/a>. You can configure your Jetty server by deploying a bundle fragment with the appropriate &lt;code>jetty.xml&lt;/code> file. Awesome!&lt;/p></description></item><item><title>Understanding the 'unresolved constraint', 'missing requirement' message from Apache Felix</title><link>https://thecarlhall.github.io/post/understanding-the-unresolved-constraint-missing-resource-message-from-apache-felix/</link><pubDate>Thu, 19 Jan 2012 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/understanding-the-unresolved-constraint-missing-resource-message-from-apache-felix/</guid><description>&lt;p>It&amp;rsquo;s pretty common while developing an OSGi bundle that your imports and exports won&amp;rsquo;t quite match what you need or what exists in the server you&amp;rsquo;re deploying to. This can show up as &lt;code>NoClassDefFoundError&lt;/code>, &lt;code>ClassNotFoundException&lt;/code> or as log output in a stacktrace from bundle resolution. Hall, Pauls, McCullough and Savage did a great job of covering NCDFE and CNFE in &lt;a href="http://www.manning.com/hall/" title="OSGi In Action">&amp;ldquo;OSGi In Action&amp;rdquo;&lt;/a> (chapter 8), let&amp;rsquo;s take a look at figuring out what the bundle resolution stacktrace is telling us. &lt;em>(I make nothing from the sales of &amp;ldquo;OSGi In Action&amp;rdquo; and suggest it to anyone interested in OSGi.)&lt;/em>&lt;/p>
&lt;p>Just like learning to read the stacktrace from an exception in Java is key to debugging, so is true about the dependency resolution messages from an OSGi container. Below is the output from &lt;a href="http://felix.apache.org/site/index.html" title="Apache Felix">Apache Felix&lt;/a> when it encountered a missing dependency required by a bundle:&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;pre tabindex="0">&lt;code>ERROR: Bundle org.sakaiproject.nakamura.webconsole.solr [124]: Error starting slinginstall:org.sakaiproject.nakamura.webconsole.solr-1.2-SNAPSHOT.jar (org.osgi.framework.BundleException: Unresolved constraint in bundle org.sakaiproject.nakamura.webconsole.solr [124]: Unable to resolve 124.0: missing requirement [124.0] package; (package=org.apache.solr.client.solrj) [caused by: Unable to resolve 84.0: missing requirement [84.0] package; (package=org.sakaiproject.nakamura.api.lite) [caused by: Unable to resolve 86.0: missing requirement [86.0] package; (&amp;amp;amp;(package=com.google.common.collect)(version&amp;amp;gt;=9.0.0)(!(version&amp;amp;gt;=10.0.0)))]])
org.osgi.framework.BundleException: Unresolved constraint in bundle org.sakaiproject.nakamura.webconsole.solr [124]: Unable to resolve 124.0: missing requirement [124.0] package; (package=org.apache.solr.client.solrj) [caused by: Unable to resolve 84.0: missing requirement [84.0] package; (package=org.sakaiproject.nakamura.api.lite) [caused by: Unable to resolve 86.0: missing requirement [86.0] package; (&amp;amp;amp;(package=com.google.common.collect)(version&amp;amp;gt;=9.0.0)(!(version&amp;amp;gt;=10.0.0)))]]
at org.apache.felix.framework.Felix.resolveBundle(Felix.java:3443)
at org.apache.felix.framework.Felix.startBundle(Felix.java:1727)
at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1156)
at org.apache.felix.framework.StartLevelImpl.run(StartLevelImpl.java:264)
at java.lang.Thread.run(Thread.java:619)&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>What you have here is a stacktrace with a lengthy message. The important part of the stacktrace for us &lt;em>is&lt;/em> the message.&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;pre tabindex="0">&lt;code>ERROR: Bundle org.sakaiproject.nakamura.webconsole.solr [124]: Error starting slinginstall:org.sakaiproject.nakamura.webconsole.solr-1.2-SNAPSHOT.jar (org.osgi.framework.BundleException: Unresolved constraint in bundle org.sakaiproject.nakamura.webconsole.solr [124]: Unable to resolve 124.0: missing requirement [124.0] package; (package=org.apache.solr.client.solrj) [caused by: Unable to resolve 84.0: missing requirement [84.0] package; (package=org.sakaiproject.nakamura.api.lite) [caused by: Unable to resolve 86.0: missing requirement [86.0] package; (&amp;amp;amp;(package=com.google.common.collect)(version&amp;amp;gt;=9.0.0)(!(version&amp;amp;gt;=10.0.0)))]])&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>This message is pretty simple but the structure is common for nastier messages (i.e. deeper resolution paths before failure). Let&amp;rsquo;s pull it apart to see what&amp;rsquo;s happening in there.&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;pre tabindex="0">&lt;code>ERROR: Bundle org.sakaiproject.nakamura.webconsole.solr [124]: Error starting slinginstall:org.sakaiproject.nakamura.webconsole.solr-1.2-SNAPSHOT.jar&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>This very first part tells us that an error occurred while trying to load the &lt;code>org.sakaiproject.nakamura.webconsole.solr&lt;/code>bundle. Nice start, but not quite the crux of the matter. Let&amp;rsquo;s keep reading.&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;pre tabindex="0">&lt;code>org.osgi.framework.BundleException: Unresolved constraint in bundle org.sakaiproject.nakamura.webconsole.solr [124]: Unable to resolve 124.0: missing requirement [124.0] package; (package=org.apache.solr.client.solrj) [caused by: Unable to resolve 84.0: missing requirement [84.0] package; (package=org.sakaiproject.nakamura.api.lite) [caused by: Unable to resolve 86.0: missing requirement [86.0] package; (&amp;amp;amp;(package=com.google.common.collect)(version&amp;amp;gt;=9.0.0)(!(version&amp;amp;gt;=10.0.0)))]])&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Phew, that&amp;rsquo;s a lot of text! This is the heart of what we need though, so let&amp;rsquo;s break it down to make more sense of it.&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;pre tabindex="0">&lt;code>(
org.osgi.framework.BundleException: Unresolved constraint in bundle org.sakaiproject.nakamura.webconsole.solr [124]: Unable to resolve 124.0: missing requirement [124.0] package; (package=org.apache.solr.client.solrj)
[
caused by: Unable to resolve 84.0: missing requirement [84.0] package; (package=org.sakaiproject.nakamura.api.lite)
[
caused by: Unable to resolve 86.0: missing requirement [86.0] package; (&amp;amp;amp;(package=com.google.common.collect)(version&amp;amp;gt;=9.0.0)(!(version&amp;amp;gt;=10.0.0)))
]
]
)&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="what-are-those-numbers-in-the-message">What are those &lt;code>[number]&lt;/code>s in the message?&lt;/h3>
&lt;p>The numbers in the message tell us the bundle ID on the server.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Unresolved Package Name&lt;/th>
&lt;th>Bundle ID Where Resolution Failed&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>org.apache.solr.client.solrj&lt;/td>
&lt;td>124&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>org.sakaiproject.nakamura.api.lite&lt;/td>
&lt;td>84&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>com.google.common.collect&lt;/td>
&lt;td>86&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Once you pull apart the message it becomes more obvious that it has structure and meaning! The structure of the message tells us that bundle 124 depends on a package from bundle 84 which depends on a package from bundle 86 which is unable to resolve &lt;code>com.google.common.collect;version=[9.0.0, 10.0.0)&lt;/code>. The innermost/very last message tells us the root of the problem; the dependency resolver was unable to find &lt;code>com.google.common.collect&lt;/code> at &lt;code>version=[9.0.0, 10.0.0)&lt;/code>. Now we have somewhere to start digging.&lt;/p>
&lt;h3 id="how-to-fix-this">How To Fix This&lt;/h3>
&lt;p>I suggest one of the following steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Add a bundle that exports the missing package with a version that matches the required version&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Change the version to match an exported package already on the server&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>In this particular environment, &lt;code>com.google.common.collect;version=10.0.0&lt;/code> is what our server has deployed. The descriptor above specifically blocks any version not in the 9.x.x range. We generate the OSGi manifest by using the &lt;a href="http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html" title="Maven Bundle Plugin">Maven Bundle Plugin&lt;/a> which uses the BND tool to generate the manifest. In BND version &amp;gt; 2.1.0, the &lt;a href="http://www.aqute.biz/Bnd/Versioning" title="macro for versions">macro for versions&lt;/a> was changed. Our solution has ranged from rolling back to bnd version=2.1.0 &lt;strong>OR&lt;/strong> &lt;a href="http://davidvaleri.wordpress.com/2011/04/07/secrets-of-the-felix-bundle-plug-in-macros-revealed/" title="define the macro differently">define the macro differently&lt;/a>. The results are the same; the version segment in the manifest header becomes &lt;code>com.google.common.collect;version&amp;gt;=9.0.0&lt;/code> which finds our bundle of &lt;code>com.google.common.collect;version=10.0.0&lt;/code>.&lt;/p>
&lt;h3 id="notes-about-environment">Notes about environment&lt;/h3>
&lt;p>The above message and stacktrace originated from a Sakai OAE environment which is built on Apache Sling and thusly Apache Felix. We use an artifact ID that is the root package of the bundle (org.sakaiproject.nakamura.webconsole.solr). This has the side effect that our bundle names look like package names in the message but gives a very clear naming convention.&lt;/p></description></item><item><title>Using pygraphviz to plot OSGi bundle dependencies</title><link>https://thecarlhall.github.io/post/using-pygraphviz-to-plot-osgi-bundle-dependencies/</link><pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/using-pygraphviz-to-plot-osgi-bundle-dependencies/</guid><description>&lt;p>I&amp;rsquo;ve been working on an OSGi project for the last few years. As with any project, evolutionary changes will eventually require some cleanup. As new bundles have been added over time, the graph of dependencies is starting to get unwieldy in places. Even with good management of these dependencies, a nice visual layout of things can really help you see how your bundles are interconnected and give you the power to start separating some connections if you graph starts to hit cyclical dependencies.&lt;/p>
&lt;p>I drove around a few different visual tools in Eclipse (&lt;a href="http://www.eclipse.org/pde/incubator/dependency-visualization/" title="PDE visualization tool">PDE visualization tool&lt;/a>, m2eclipse dependency graph) but needed something that would narrow the view to just my project. I not only wanted to see what things my bundles depend on in the project but I wanted to see what depends on a given bundle.&lt;/p>
&lt;p>This was my first project with pygraphviz but after I figured out which way the grain runs, I was able to give it a basic graph of my project and generate the diagrams I wanted. I finally let pygraphviz handle the graph traversing and things got better (less code, faster results).&lt;/p>
&lt;p>Since I wanted to analyze the runtime dependencies of my server, I installed the &lt;a href="http://felix.apache.org/site/apache-felix-remote-shell.html" title="Felix Remote Shell">Felix Remote Shell&lt;/a> bundle along with the &lt;a href="http://felix.apache.org/site/apache-felix-shell.html" title="Felix Shell">Felix Shell&lt;/a> bundle to allow remote connections to management functionality. With these in place, I was able to connect via telnet and query for package level information to build my graph.&lt;/p>
&lt;p>Using the code below, I was able to generate a graph of the entire project (successors) and a graph for each bundle in the graph (predecessors and successors). Some sample images are below the source code. Eventually I&amp;rsquo;ll add saving and opening of dot files to allow for analysis without a running server.&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#! /usr/bin/env python&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> re
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> sets &lt;span style="color:#f92672">import&lt;/span> Set
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pygraphviz &lt;span style="color:#66d9ef">as&lt;/span> pgv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> telnetlib
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># [ 1] [Active ] [ 15] org.sakaiproject.nakamura.messaging (0.11.0.SNAPSHOT)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bundle_from_ps &lt;span style="color:#f92672">=&lt;/span> re&lt;span style="color:#f92672">.&lt;/span>compile(&lt;span style="color:#e6db74">&amp;#39;^\[\s*(?P&amp;amp;lt;bundle_id&amp;amp;gt;\d+)\]\s\[.+\]\s(?P&amp;amp;lt;bundle_name&amp;amp;gt;.+)\s&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># org.sakaiproject.nakamura.api.solr; version=0.0.0 -&amp;amp;gt; org.sakaiproject.nakamura.solr [11]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bundle_from_req &lt;span style="color:#f92672">=&lt;/span> re&lt;span style="color:#f92672">.&lt;/span>compile(&lt;span style="color:#e6db74">&amp;#39;^.*-\&amp;amp;gt; (?P&amp;amp;lt;bundle_name&amp;amp;gt;.*) \[(?P&amp;amp;lt;bundle_id&amp;amp;gt;.*)\]$&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_sakai_bundles&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;&lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;&lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;Get a list of bundles that are create &lt;span style="color:#66d9ef">as&lt;/span> part of Sakai OAE&lt;span style="color:#f92672">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Returns a dictionary of dict[bundle_name] &lt;span style="color:#f92672">=&lt;/span> bundle_id&lt;span style="color:#f92672">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;&lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;&lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tn &lt;span style="color:#f92672">=&lt;/span> telnetlib&lt;span style="color:#f92672">.&lt;/span>Telnet(&lt;span style="color:#e6db74">&amp;#39;localhost&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;6666&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tn&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#39;ps -s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">exit&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines &lt;span style="color:#f92672">=&lt;/span> [line &lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> tn&lt;span style="color:#f92672">.&lt;/span>read_all()&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\r\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">&amp;#39;org.sakaiproject&amp;#39;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> line]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bundles &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> lines:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m &lt;span style="color:#f92672">=&lt;/span> bundle_from_ps&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#66d9ef">match&lt;/span>(line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bundles[m&lt;span style="color:#f92672">.&lt;/span>group(&lt;span style="color:#e6db74">&amp;#39;bundle_name&amp;#39;&lt;/span>)] &lt;span style="color:#f92672">=&lt;/span> m&lt;span style="color:#f92672">.&lt;/span>group(&lt;span style="color:#e6db74">&amp;#39;bundle_id&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> bundles
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_package_reqs&lt;/span>(bundle_id):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;&lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;&lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;Gets the requirements (imports) &lt;span style="color:#66d9ef">for&lt;/span> a given bundle&lt;span style="color:#f92672">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Returns a dictionary of dict[bundle_name] &lt;span style="color:#f92672">=&lt;/span> bundle_id&lt;span style="color:#f92672">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Keyword arguments:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bundle_id &lt;span style="color:#f92672">--&lt;/span> Bundle ID returned by the server &lt;span style="color:#f92672">in&lt;/span> the output of
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> get_sakai_bundles()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;&lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;&lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tn &lt;span style="color:#f92672">=&lt;/span> telnetlib&lt;span style="color:#f92672">.&lt;/span>Telnet(&lt;span style="color:#e6db74">&amp;#39;localhost&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;6666&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tn&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#39;inspect package requirement &lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">exit&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> (bundle_id))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines &lt;span style="color:#f92672">=&lt;/span> [line &lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> tn&lt;span style="color:#f92672">.&lt;/span>read_all()&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\r\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">if&lt;/span> line&lt;span style="color:#f92672">.&lt;/span>startswith(&lt;span style="color:#e6db74">&amp;#39;org.sakaiproject&amp;#39;&lt;/span>) &lt;span style="color:#f92672">and&lt;/span> line&lt;span style="color:#f92672">.&lt;/span>endswith(&lt;span style="color:#e6db74">&amp;#39;]&amp;#39;&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reqs &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> lines:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m &lt;span style="color:#f92672">=&lt;/span> bundle_from_req&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#66d9ef">match&lt;/span>(line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reqs[m&lt;span style="color:#f92672">.&lt;/span>group(&lt;span style="color:#e6db74">&amp;#39;bundle_name&amp;#39;&lt;/span>)] &lt;span style="color:#f92672">=&lt;/span> m&lt;span style="color:#f92672">.&lt;/span>group(&lt;span style="color:#e6db74">&amp;#39;bundle_id&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> reqs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">build_bundle_graph&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;&lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;&lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;Build a graph_attr (nodes, edges) representing the connectivity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> within Sakai bundles
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;&lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;&lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sakai_bundles &lt;span style="color:#f92672">=&lt;/span> get_sakai_bundles()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bundles &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> b_name, b_id &lt;span style="color:#f92672">in&lt;/span> sakai_bundles&lt;span style="color:#f92672">.&lt;/span>items():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reqs &lt;span style="color:#f92672">=&lt;/span> get_package_reqs(b_id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bundles[b_name] &lt;span style="color:#f92672">=&lt;/span> reqs&lt;span style="color:#f92672">.&lt;/span>keys()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> bundles
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">draw_subgraph&lt;/span>(name, graph, filename, successors &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;&lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;&lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;Draw (write to disk) a subgraph that starts &lt;span style="color:#66d9ef">with&lt;/span> &lt;span style="color:#f92672">or&lt;/span> ends &lt;span style="color:#66d9ef">with&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> the specified node&lt;span style="color:#f92672">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Keyword arguments:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">--&lt;/span> name of the node to focus on
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph &lt;span style="color:#f92672">--&lt;/span> graph of paths between bundles
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filename &lt;span style="color:#f92672">--&lt;/span> filename to write subgraph to
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> successors &lt;span style="color:#f92672">--&lt;/span> whether to lookup successors &lt;span style="color:#f92672">or&lt;/span> predecessors
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;&lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;&lt;span style="color:#f92672">&amp;amp;&lt;/span>quot;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> successors:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nbunch &lt;span style="color:#f92672">=&lt;/span> graph&lt;span style="color:#f92672">.&lt;/span>successors(name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nbunch &lt;span style="color:#f92672">=&lt;/span> graph&lt;span style="color:#f92672">.&lt;/span>predecessors(name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> nbunch:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nbunch&lt;span style="color:#f92672">.&lt;/span>append(name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subgraph &lt;span style="color:#f92672">=&lt;/span> graph&lt;span style="color:#f92672">.&lt;/span>subgraph(nbunch)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subgraph&lt;span style="color:#f92672">.&lt;/span>layout(prog &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;dot&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subgraph&lt;span style="color:#f92672">.&lt;/span>draw(&lt;span style="color:#e6db74">&amp;#39;graphviz/&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> filename)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>isdir(&lt;span style="color:#e6db74">&amp;#39;graphviz&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> os&lt;span style="color:#f92672">.&lt;/span>mkdir(&lt;span style="color:#e6db74">&amp;#39;graphviz&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bundles_graph &lt;span style="color:#f92672">=&lt;/span> build_bundle_graph()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># print the whole graph&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph &lt;span style="color:#f92672">=&lt;/span> pgv&lt;span style="color:#f92672">.&lt;/span>AGraph(data &lt;span style="color:#f92672">=&lt;/span> bundles_graph, directed &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph&lt;span style="color:#f92672">.&lt;/span>layout(prog &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;dot&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph&lt;span style="color:#f92672">.&lt;/span>draw(&lt;span style="color:#e6db74">&amp;#39;graphviz/org.sakaiproject.nakamura.png&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> b_name, reqs &lt;span style="color:#f92672">in&lt;/span> bundles_graph&lt;span style="color:#f92672">.&lt;/span>items():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> draw_subgraph(b_name, graph, &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">.png&amp;#39;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> b_name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> draw_subgraph(b_name, graph, &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">-pred.png&amp;#39;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> b_name, &lt;span style="color:#66d9ef">False&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main()&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;figure>
&lt;p>&lt;img src="https://thecarlhall.github.io/images/org-sakaiproject-nakamura.png" alt="Sakai OAE Bundle Dependency Graph">&lt;/p>
&lt;figcaption>
&lt;p>Sakai OAE Bundle Dependency Graph&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;p>&lt;img src="https://thecarlhall.github.io/images/org-sakaiproject-nakamura-solr-pred.png" alt="Sakai OAE Solr Bundle Predecessors">&lt;/p>
&lt;figcaption>
&lt;p>Sakai OAE Solr Bundle Predecessors&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;p>&lt;img src="https://thecarlhall.github.io/images/org-sakaiproject-nakamura-presence.png" alt="Sakai OAE Presence Bundle Successors">&lt;/p>
&lt;figcaption>
&lt;p>Sakai OAE Presence Bundle Successors&lt;/p>
&lt;/figcaption>
&lt;/figure></description></item><item><title>Committer Status on Apache Sling</title><link>https://thecarlhall.github.io/post/committer-status-on-apache-sling/</link><pubDate>Wed, 16 Feb 2011 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/committer-status-on-apache-sling/</guid><description>&lt;p>I woke up this morning to the fantastic news that I&amp;rsquo;ve been offered committer status on Apache Sling! I graciously and excitedly accepted the opportunity to become an Apache committer. The various points of processing are in motion, so expect to see more Sling posts from me as I get ramped up into being a more productive member of Apache Sling.&lt;/p></description></item><item><title>Basics of OSGi and Declarative Services</title><link>https://thecarlhall.github.io/post/basics-of-osgi-and-declarative-services/</link><pubDate>Thu, 10 Feb 2011 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/basics-of-osgi-and-declarative-services/</guid><description>&lt;p>This is a slide deck for a talk I gave at the Sakai 2010 conference in lovely Denver, Colorado. The title to the talk was &amp;ldquo;Using OSGi in Nakamura&amp;rdquo; which was my original intention, but after reviewing the slides I seemed to have given a talk about the basics of OSGi. Good information under a wrong marquee.&lt;/p>
&lt;p>No matter the intention, I found today that I needed to refer to the slides for setting up an activator, so I&amp;rsquo;m reposting it here to give myself and hopefully others faster access. Be on the lookout for a repeat performance of this presentation at the Sakai 2011 conference in Los Angeles. I might even try to show it around a bit once the European conference is announced.&lt;/p>
&lt;iframe src="https://www.slideshare.net/slideshow/embed_code/key/hzviRxmA0LcY4N?startSlide=1" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px;max-width: 100%;" allowfullscreen>&lt;/iframe>&lt;div style="margin-bottom:5px">&lt;strong>&lt;a href="https://www.slideshare.net/slideshow/using-osgi-in-nakamura/4518794" title="Using OSGi in Nakamura" target="_blank">Using OSGi in Nakamura&lt;/a>&lt;/strong> from &lt;strong>&lt;a href="https://www.slideshare.net/thecarlhall" target="_blank">Carl Hall&lt;/a>&lt;/strong>&lt;/div></description></item><item><title>When To Immediately Activate An OSGi Component</title><link>https://thecarlhall.github.io/post/when-to-immediately-activate-an-osgi-component/</link><pubDate>Fri, 04 Feb 2011 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/when-to-immediately-activate-an-osgi-component/</guid><description>&lt;p>OSGi has a fantastic feature for immediate components &lt;a href="https://thecarlhall.github.io/post/when-to-immediately-activate-an-osgi-component/#1_osgi">[1]&lt;/a> and delayed components &lt;a href="https://thecarlhall.github.io/post/when-to-immediately-activate-an-osgi-component/#2_osgi">[2]&lt;/a>. This allows components to delay their possibly expensive activation until the component is first accessed. At the very least it allows the OSGi platform to consume resources as needed. No sense is sucking up those server resources for something that can wait.&lt;/p>
&lt;p>As developers start their adventure into OSGi, I&amp;rsquo;ve noticed a pattern creeping up that I&amp;rsquo;m not sure folks are aware of: j_ust because you like your component doesn&amp;rsquo;t mean it needs to start immediately._ Unless your component has something it needs to do before other components can do their work, there&amp;rsquo;s little need to start a component immediately. A lot of times, the work can be moved into the bundle activator or is fine being delayed.&lt;/p>
&lt;p>People often see that a component does &lt;em>something&lt;/em> in its activation method and assume it should start immediately. The questions to ask yourself are:&lt;/p>
&lt;ul>
&lt;li>Will the things that need to use this component have a reference to it? &lt;em>Yes? Delayed activation.&lt;/em>&lt;/li>
&lt;li>Before activation, will functionality be missing that should be available as soon as possible? &lt;em>Yes? Immediate activation.&lt;/em>&lt;/li>
&lt;li>Can something else do the job of activating the component at a later time? &lt;em>Yes? Delayed activation.&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>Registering with an external service, such as JMS, is a perfect scenario for an immediate component. If the JMS service were in OSGi, declarative services could do the work of making sure service trackers know your component exists, but OSGi has no jurisdiction over external resources. Binding to a JMS topic requires manual interaction and therefore should happen by way of immediate component activation.&lt;/p>
&lt;p>Getting and setting of properties is not a case for immediate component activation. Neither is because the service is referenced by something else.&lt;/p>
&lt;p>When using declarative services, a reference to your not-yet-started component will be given to anything that has said it wants to collect an interface you implement. This requires no effort on the part of the service being referenced and thusly does not require the referenced service to be activated immediately. Fret not! On first access of this service by any consumer the service will get activated.&lt;/p>
&lt;p>OSGi has not been the fastest thing for me to learn but understanding the nuances of little things like this really helps me understand why it is a good approach at decoupled services and modular software construction.&lt;/p>
&lt;p>1. OSGi compendium spec version 4.2, section 112.2.2 2. OSGi compendium spec version 4.2, section 112.2.3&lt;/p></description></item><item><title>LDAP Authentication &amp;amp; Authorization Dissected and Digested</title><link>https://thecarlhall.github.io/post/ldap-authentication-authorization-dissected-and-digested/</link><pubDate>Tue, 04 Jan 2011 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/ldap-authentication-authorization-dissected-and-digested/</guid><description>&lt;p>LDAP is one of those things that I&amp;rsquo;ve integrated with a few times but never put enough energy into to really get the details or understand it much.  There&amp;rsquo;s always been someone I can bounce questions off of and thankfully those people were available again as I started working out the details of performing LDAP authentication.&lt;/p>
&lt;p>The steps below are general enough to be used by anyone and will hopefully shed some light into the steps performed in LDAP authentication.  The process below also includes some steps for authorization.&lt;/p>
&lt;h3 id="authentication">Authentication&lt;/h3>
&lt;p>&lt;em>1.  Get a connection to the LDAP server.&lt;/em> With the host and port for the LDAP server, create a connection to it.  This can be  a simple direct connection or a pooled connection.  If more than a basic test, it is best to use a pooled connection.  Log and fail if a connection cannot be created.&lt;/p>
&lt;p>&lt;em>2.  Bind as the application user.&lt;/em> Bind the connection to the application user.  This user should have enough permissions to search the area of LDAP where users are located.  This user may also have permissions to search for things outside of the users area (groups, authorization).  Log and fail if the application user cannot bind.&lt;/p>
&lt;p>&lt;em>3.  Search for the DN (distinguished name) of the user to be authenticated.&lt;/em> This is where we verify the username is valid.  This does not authenticate the user but simply makes sure the requested username exists in the system.  Log and fail if the user&amp;rsquo;s DN is not found.&lt;/p>
&lt;p>&lt;em>4.  Bind as user to be authenticated using DN from step 3.&lt;/em> Now for the moment of truth.  Bind to the connection using the DN found in step 3 and the password supplied by the user.  Log and fail if unable to bind using the user&amp;rsquo;s DN and password.&lt;/p>
&lt;h3 id="authorization">Authorization&lt;/h3>
&lt;p>&lt;em>5.  Re-bind as application user.&lt;/em> To check the authorization of a user, we need to read attributes from the user&amp;rsquo;s account. To do this, we need to re-bind as the application user.&lt;/p>
&lt;p>&lt;em>6.  Search for user and require attributes.&lt;/em> A filter is used to search for the user like was done in step 3 but we&amp;rsquo;ll add an extra check to the query to look for the attributes that show we&amp;rsquo;re authorized.&lt;/p>
&lt;h3 id="example-code">Example Code&lt;/h3>
&lt;p>The code shown here is using the JLDAP library from Novell.  Interesting includes are noted at the top. The utility class used for escaping the search filter can be found in the &lt;a href="https://github.com/thecarlhall/nakamura/blob/master/contrib/ldap/src/main/java/org/sakaiproject/nakamura/api/ldap/LdapUtil.java">Sakai Project&amp;rsquo;s Nakamura codebase&lt;/a>.&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> com.novell.ldap.LDAPAttribute;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> com.novell.ldap.LDAPConnection;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> com.novell.ldap.LDAPEntry;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> com.novell.ldap.LDAPException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> com.novell.ldap.LDAPSearchResults;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String baseDn &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ou=People,o=MyOrg&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String userFilter &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;uid = {}&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String authzFilter &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;authzAttr=special:Entitlement:value&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">authenticate&lt;/span>(Credentials credentials) &lt;span style="color:#66d9ef">throws&lt;/span> RepositoryException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">boolean&lt;/span> auth &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (credentials &lt;span style="color:#66d9ef">instanceof&lt;/span> SimpleCredentials) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// get application user credentials&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String appUser &lt;span style="color:#f92672">=&lt;/span> connMgr.&lt;span style="color:#a6e22e">getConfig&lt;/span>().&lt;span style="color:#a6e22e">getLdapUser&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String appPass &lt;span style="color:#f92672">=&lt;/span> connMgr.&lt;span style="color:#a6e22e">getConfig&lt;/span>().&lt;span style="color:#a6e22e">getLdapPassword&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// get user credentials SimpleCredentials sc = (SimpleCredentials) credentials;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> timeStart &lt;span style="color:#f92672">=&lt;/span> System.&lt;span style="color:#a6e22e">currentTimeMillis&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String userDn &lt;span style="color:#f92672">=&lt;/span> LdapUtil.&lt;span style="color:#a6e22e">escapeLDAPSearchFilter&lt;/span>(userFilter.&lt;span style="color:#a6e22e">replace&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;{}&amp;#34;&lt;/span>, sc.&lt;span style="color:#a6e22e">getUserID&lt;/span>()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String userPass &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> String(sc.&lt;span style="color:#a6e22e">getPassword&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LDAPConnection conn &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 1) Get a connection to the server&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conn &lt;span style="color:#f92672">=&lt;/span> connMgr.&lt;span style="color:#a6e22e">getConnection&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#a6e22e">debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Connected to LDAP server&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">catch&lt;/span> (LDAPException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> IllegalStateException(&lt;span style="color:#e6db74">&amp;#34;Unable to connect to LDAP server \[&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> connMgr.&lt;span style="color:#a6e22e">getConfig&lt;/span>().&lt;span style="color:#a6e22e">getLdapHost&lt;/span>() &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\]&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 2) Bind as app user&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conn.&lt;span style="color:#a6e22e">bind&lt;/span>(LDAPConnection.&lt;span style="color:#a6e22e">LDAP_V3&lt;/span>, appUser, appPass.&lt;span style="color:#a6e22e">getBytes&lt;/span>(UTF8));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#a6e22e">debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Bound as application user&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">catch&lt;/span> (LDAPException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> IllegalArgumentException(&lt;span style="color:#e6db74">&amp;#34;Can&amp;#39;t bind application user \[&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> appUser &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\]&amp;#34;&lt;/span>, e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 3) Search for username (not authz).&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// If search fails, log/report invalid username or password.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LDAPSearchResults results &lt;span style="color:#f92672">=&lt;/span> conn.&lt;span style="color:#a6e22e">search&lt;/span>(baseDn, LDAPConnection.&lt;span style="color:#a6e22e">SCOPE_SUB&lt;/span>, userDn, &lt;span style="color:#66d9ef">null&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (results.&lt;span style="color:#a6e22e">hasMore&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#a6e22e">debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Found user via search&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> IllegalArgumentException(&lt;span style="color:#e6db74">&amp;#34;Can&amp;#39;t find user \[&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> userDn &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\]&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 4) Bind as user.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// If bind fails, log/report invalid username or password.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// value is set below. define here for use in authz check.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String userEntryDn &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LDAPEntry userEntry &lt;span style="color:#f92672">=&lt;/span> results.&lt;span style="color:#a6e22e">next&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LDAPAttribute objectClass &lt;span style="color:#f92672">=&lt;/span> userEntry.&lt;span style="color:#a6e22e">getAttribute&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;objectClass&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#e6db74">&amp;#34;aliasObject&amp;#34;&lt;/span>.&lt;span style="color:#a6e22e">equals&lt;/span>(objectClass.&lt;span style="color:#a6e22e">getStringValue&lt;/span>())) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LDAPAttribute aliasDN &lt;span style="color:#f92672">=&lt;/span> userEntry.&lt;span style="color:#a6e22e">getAttribute&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;aliasedObjectName&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> userEntryDn &lt;span style="color:#f92672">=&lt;/span> aliasDN.&lt;span style="color:#a6e22e">getStringValue&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> userEntryDn &lt;span style="color:#f92672">=&lt;/span> userEntry.&lt;span style="color:#a6e22e">getDN&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conn.&lt;span style="color:#a6e22e">bind&lt;/span>(LDAPConnection.&lt;span style="color:#a6e22e">LDAP_V3&lt;/span>, userEntryDn, userPass.&lt;span style="color:#a6e22e">getBytes&lt;/span>(UTF8));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#a6e22e">debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Bound as user&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">catch&lt;/span> (LDAPException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#a6e22e">warn&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Can&amp;#39;t bind user \[{}\]&amp;#34;&lt;/span>, userDn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> e;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (authzFilter.&lt;span style="color:#a6e22e">length&lt;/span>() &lt;span style="color:#f92672">&amp;gt;&lt;/span> 0) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 5) Return to app user&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conn.&lt;span style="color:#a6e22e">bind&lt;/span>(LDAPConnection.&lt;span style="color:#a6e22e">LDAP_V3&lt;/span>, appUser, appPass.&lt;span style="color:#a6e22e">getBytes&lt;/span>(UTF8));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#a6e22e">debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Rebound as application user&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">catch&lt;/span> (LDAPException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> IllegalArgumentException(&lt;span style="color:#e6db74">&amp;#34;Can&amp;#39;t bind application user \[&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> appUser &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\]&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 6) Search user DN with authz filter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// If search fails, log/report that user is not authorized&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String userAuthzFilter &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;(&amp;amp;(&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> userEntryDn &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;)(&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> authzFilter &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;))&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> results &lt;span style="color:#f92672">=&lt;/span> conn.&lt;span style="color:#a6e22e">search&lt;/span>(baseDn, LDAPConnection.&lt;span style="color:#a6e22e">SCOPE_SUB&lt;/span>, userAuthzFilter, &lt;span style="color:#66d9ef">null&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (results.&lt;span style="color:#a6e22e">hasMore&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#a6e22e">debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Found user + authz filter via search&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> IllegalArgumentException(&lt;span style="color:#e6db74">&amp;#34;User not authorized \[&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> userDn &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\]&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// FINALLY!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auth &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#a6e22e">info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;User \[{}\] authenticated with LDAP in {}ms&amp;#34;&lt;/span>, userDn, System.&lt;span style="color:#a6e22e">currentTimeMillis&lt;/span>() &lt;span style="color:#f92672">-&lt;/span> timeStart);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">catch&lt;/span> (Exception e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#a6e22e">warn&lt;/span>(e.&lt;span style="color:#a6e22e">getMessage&lt;/span>(), e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">finally&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connMgr.&lt;span style="color:#a6e22e">returnConnection&lt;/span>(conn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> auth;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div></description></item><item><title>Setting Up RVM, Ruby, Gem and Rails on Ubuntu</title><link>https://thecarlhall.github.io/post/setting-up-rvm-ruby-gem-and-rails-on-ubuntu/</link><pubDate>Tue, 19 Oct 2010 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/setting-up-rvm-ruby-gem-and-rails-on-ubuntu/</guid><description>&lt;p>&lt;strong>This is centered on Ubuntu only because aptitude is used once. If you&amp;rsquo;re comfortable with your package manager feel free to replace the aptitude command with your local command.&lt;/strong>&lt;/p>
&lt;p>I&amp;rsquo;m beginning to dig deeper into ruby, rails and the whole suite of tools available for them and have hit my knee on several things along the way. I&amp;rsquo;m no stranger to downloading things to download things to do things; I&amp;rsquo;ve been doing that in Java since 1996. I&amp;rsquo;ve also been kicking the tires on Ubuntu sense back before they got their naming scheme together and Debian even before that. I totally dig the Debian/Ubuntu way of install by deb packages. But with ruby, like Java, I feel it is best setup a machine by minimizing the use of apt (apt-get, aptitude, etc) and downloading the tools you need directly. I don&amp;rsquo;t let aptitude install Eclipse, Xalan, servlet-api or any of the other tools/libraries I use on top of the JVM and this is the route I have ended up going with when setting up ruby as well.&lt;/p>
&lt;h2 id="tldr-short-list-of-what-to-do">TL;DR: short list of what to do&lt;/h2>
&lt;p>This short list is for Ruby 1.9.2. If you want to install an earlier version, be sure to follow the extra steps about &lt;a href="https://thecarlhall.github.io/post/setting-up-rvm-ruby-gem-and-rails-on-ubuntu/#install_gem">installing gem from rubygems.org&lt;/a>.&lt;/p>
&lt;ol>
&lt;li>Install RVM &lt;a href="https://thecarlhall.github.io/post/setting-up-rvm-ruby-gem-and-rails-on-ubuntu/#install_rvm">[details]&lt;/a>:&lt;/li>
&lt;/ol>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>bash &amp;lt; &amp;gt; ~/.bashrc &lt;span style="color:#75715e"># This loads RVM into a shell session. source ~/.bashrc&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;ol start="2">
&lt;li>Install a C compiler for RVM &lt;a href="https://thecarlhall.github.io/post/setting-up-rvm-ruby-gem-and-rails-on-ubuntu/#install_gcc">[details]&lt;/a>:&lt;/li>
&lt;/ol>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo aptitude install gcc&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;ol start="3">
&lt;li>
&lt;p>Install Ruby 1.9.2 using RVM &lt;a href="https://thecarlhall.github.io/post/setting-up-rvm-ruby-gem-and-rails-on-ubuntu/#install_ruby">[details]&lt;/a>:&lt;/p>
&lt;p>&lt;em>&lt;a href="https://thecarlhall.github.io/post/setting-up-rvm-ruby-gem-and-rails-on-ubuntu/#install_gem">See below for instructions on installing RubyGems when using Ruby &amp;lt; v1.9.2&lt;/a>&lt;/em>&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>rvm pkg install zlib rvm install &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#ae81ff">9&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">--&lt;/span>default &lt;span style="color:#f92672">-&lt;/span>C &lt;span style="color:#f92672">--&lt;/span>with&lt;span style="color:#f92672">-&lt;/span>zlib&lt;span style="color:#f92672">-&lt;/span>dir&lt;span style="color:#f92672">=&lt;/span>$HOME&lt;span style="color:#f92672">/.&lt;/span>rvm&lt;span style="color:#f92672">/&lt;/span>usr&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>Install Rails using RubyGems &lt;a href="https://thecarlhall.github.io/post/setting-up-rvm-ruby-gem-and-rails-on-ubuntu/#install_rails">[details]&lt;/a>:&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gem install rails&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h2 id="details">Details:&lt;/h2>
&lt;h4 id="install-rvm">Install RVM&lt;/h4>
&lt;p>&lt;em>Note: The &lt;a href="http://rvm.beginrescueend.com/rvm/install/">full install instructions&lt;/a> have much better details.&lt;/em>&lt;/p>
&lt;p>&lt;a href="http://rvm.beginrescueend.com/">RVM (Ruby Version Manager)&lt;/a> gives us a way to install Ruby without getting it from aptitude. Being that Ruby is our starting point for everything after RVM and RVM is our means of getting Ruby, everything is downhill after getting RVM. You could install ruby using aptitude then install rvm as a gem but what&amp;rsquo;s the point of downloading Ruby just to download stuff to eventually download Ruby (again) and remove the system local stuff that was installed the first time. Let&amp;rsquo;s just cut out all the cruft in the middle.&lt;/p>
&lt;h4 id="install-a-c-compiler-for-rvm">Install a C compiler for RVM&lt;/h4>
&lt;p>Since RVM setups up the Ruby interpreter, it has to act 1 level deeper than the interpreter and C is that next level down. GCC is a very common tool to have on a linux machine, so this step is mostly for setting up a new machine. It&amp;rsquo;s always a good idea to have GCC installed. And vi. But this is a tech blog and not for theology, so I won&amp;rsquo;t go into that.&lt;/p>
&lt;p> &lt;/p>
&lt;h4 id="install-ruby-192-using-rvm">Install Ruby 1.9.2 using RVM&lt;/h4>
&lt;p>The big moment! All this work to get Ruby installed so we can begin our journey into RoR-land. This will take some time to perform as it needs to download, configure and compile Ruby.&lt;/p>
&lt;p> &lt;/p>
&lt;h5 id="_install-rubygems-from-rubygemsorg-for-ruby--v192_">&lt;em>Install RubyGems from rubygems.org for Ruby &amp;lt; v1.9.2&lt;/em>&lt;/h5>
&lt;p>&lt;em>Note: The &lt;a href="http://docs.rubygems.org/read/chapter/3">full install instructions&lt;/a> have much better details.&lt;/em>&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wget http://production.cf.rubygems.org/rubygems/rubygems-1.3.7.tgz tar zxf rubygems-1.3.7.tgz cd rubygems-1.3.7 ruby setup.rb&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>Ruby 1.9.2 includes RubyGems 1.3.7, so we don&amp;rsquo;t have to install it when we install Ruby, but for previous versions we&amp;rsquo;ll need to install this bit ourselves. You can install it from aptitude but it locks you from doing system updates and some other functionality I wasn&amp;rsquo;t keen on losting. Installing it from rubygems.org gives back the freedom to break my system in whatever way I choose.&lt;/p>
&lt;h4 id="install-rails-using-rubygems">Install Rails using RubyGems&lt;/h4>
&lt;p>This is where things get down to Ruby&amp;rsquo;s style of easy. Package management that looks like an already very easy package manager (aptitude) is a bonus in my book. Installing gems will become something you most likely get very comfortable with as this is the easiest way to get the libraries you need for your Ruby installation. Read more into &lt;a href="http://rvm.beginrescueend.com/gemsets/">RVM Gemsets&lt;/a> to see where this stuff gets even cooler. &lt;em>Note: If you get this error message:&lt;/em>&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ERROR: Loading command: install &lt;span style="color:#f92672">(&lt;/span>LoadError&lt;span style="color:#f92672">)&lt;/span> no such file to load -- zlib&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>&lt;em>take a look &lt;a href="http://rvm.beginrescueend.com/packages/zlib/">at this page for installing Ruby with zlib&lt;/a>. I tripped over this nicely.&lt;/em>&lt;/p></description></item><item><title>Setting "quoted-printable" In A commons-email Body Part</title><link>https://thecarlhall.github.io/post/setting-quoted-printable-in-a-commons-email-body-part/</link><pubDate>Thu, 02 Sep 2010 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/setting-quoted-printable-in-a-commons-email-body-part/</guid><description>&lt;p>I&amp;rsquo;m revamping the inner workings of a mail sending tool to use &lt;a href="http://commons.apache.org/email">commons-email&lt;/a>.  I wanted to make sure I set the text body parts to the appropriate transfer encoding to allow for non-ASCII languages to be used. My failed attempts and final success are documented below.&lt;/p>
&lt;h3 id="1-bad-set-message-content-transfer-encoding">1. [bad] Set Message &amp;lsquo;Content-transfer-encoding&amp;rsquo;&lt;/h3>
&lt;p>The problem with this is that everything in the message is processed as &amp;ldquo;quoted-printable&amp;rdquo; which will turn your multipart boundaries into useless wastes of text.&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// this chews up your multipart boundary&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HtmlEmail email &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> HtmlEmail();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>email.&lt;span style="color:#a6e22e">addHeader&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Content-transfer-encoding&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;quoted-printable&amp;#34;&lt;/span>);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>So rather than having this in your raw email &lt;em>(note reported and actual boundary match)&lt;/em>:&lt;/p>
&lt;p>&lt;code>Content-Type: multipart/alternative; boundary=&amp;quot;----=_Part_7_1164835397.1283397465477&amp;quot;&lt;/code>&lt;/p>
&lt;p>&lt;code>------=_Part_7_1164835397.1283397465477 Content-Type: text/plain; charset=UTF-8&lt;/code>&lt;/p>
&lt;p>You end up with this in your raw email &lt;em>(note: actual boundary has = replaced by =3D)&lt;/em>:&lt;/p>
&lt;p>&lt;code>Content-Type: multipart/alternative; boundary=&amp;quot;----=_Part_7_1164835397.1283397465477&amp;quot;&lt;/code>&lt;/p>
&lt;p>&lt;code>----=3D_Part_7_1164835397.1283397465477 Content-Type: text/plain; charset=UTF-8&lt;/code>&lt;/p>
&lt;h3 id="2-useless-setting-each-body-parts-transfer-encoding">2. [useless] Setting Each Body Part&amp;rsquo;s transfer encoding&lt;/h3>
&lt;p>I&amp;rsquo;ll save you the pain. This begins to turn commons-email back into javamail. It saves you nothing, adds lots of code, doesn&amp;rsquo;t really work and, given the next solution, is the wrong approach.&lt;/p>
&lt;h3 id="3-best-let-commons-email-do-its-job">3. [Best!] Let commons-email do it&amp;rsquo;s job&lt;/h3>
&lt;p>The solution I ended up with is to just let commons-email figure it out. My test text is &amp;ldquo;You get that thing I sent you?\n3x6=18\nåæÆÐ&amp;rdquo;. This has several non-ASCII characters that are just ripe for conversion. The raw bit of email I find is: &lt;code>------=_Part_4_644193719.1283397465436 Content-Type: text/plain; charset=UTF-8 Content-Transfer-Encoding: quoted-printable&lt;/code>&lt;/p>
&lt;p>&lt;code>You get that thing I sent you? 3x6=3D18 =C3=A5=C3=A6=C3=86=C3=90&lt;/code>&lt;/p>
&lt;p>The content-transfer-encoding is set as I expected and the content has been properly escaped. Kudus to the commons-email team for making this just happen.&lt;/p></description></item><item><title>Getting Thrift into Maven Locally</title><link>https://thecarlhall.github.io/post/getting-thrift-into-maven-locally/</link><pubDate>Fri, 27 Aug 2010 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/getting-thrift-into-maven-locally/</guid><description>&lt;p>I spent the better part of a morning trying to figure out how to get Thrift to be available in a Maven repository for a project I&amp;rsquo;m working on. Yes, I know there&amp;rsquo;s &lt;a href="https://issues.apache.org/jira/browse/THRIFT-363">a JIRA issue for this&lt;/a> but the comments are not clear and it&amp;rsquo;s more tailored towards publishing in the central Apache repository. Also, I tried using &amp;lsquo;ant publish&amp;rsquo; and got &amp;ldquo;Execute failed: java.io.IOException: Cannot run program &amp;ldquo;../../compiler/cpp/thrift&amp;rdquo;: java.io.IOException: error=2, No such file or directory&amp;rdquo;. I don&amp;rsquo;t need that kind of problem installing a library nor do I want to build the whole Thrift library.&lt;/p>
&lt;p>What I did to finally get this into my local maven repository is this.&lt;/p>
&lt;ol>
&lt;li>Download and unarchive the latest stable Thrift release
&lt;ul>
&lt;li>&lt;a href="http://incubator.apache.org/thrift/download/">http://incubator.apache.org/thrift/download/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Change into the Thrift Java root directory
&lt;ul>
&lt;li>cd lib/java&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Run the default ant target, &amp;ldquo;dist&amp;rdquo;
&lt;ul>
&lt;li>ant&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Install the build artifact into the local Maven repository. &lt;em>Note: Be sure to update the version to match what you downloaded.&lt;/em>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>mvn install:install-file -Dfile=libthrift.jar -DgroupId=org.apache.thrift -DartifactId=libthrift -Dversion=0.4.0 -Dpackaging=jar -DgeneratePom=true&lt;/li>
&lt;/ul></description></item><item><title>Find and Remove Files That Have Spaces In The Name</title><link>https://thecarlhall.github.io/post/find-and-remove-files-that-have-spaces-in-the-name/</link><pubDate>Fri, 09 Jul 2010 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/find-and-remove-files-that-have-spaces-in-the-name/</guid><description>&lt;p>Whenever I need this, it takes me seemingly forever to figure this out. Blog it!&lt;/p>
&lt;p>&amp;lsquo;find&amp;rsquo; is a great GNU utility for digging up files in directories. &amp;lsquo;rm&amp;rsquo; is a staple command for any linux user. Combining the two commands can be fun and powerful.&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>find /home/luser -type f -name &lt;span style="color:#e6db74">&amp;#39;\*.mpg&amp;#39;&lt;/span> -exec rm -f &lt;span style="color:#f92672">{}&lt;/span> &lt;span style="color:#ae81ff">\\&lt;/span>;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>The above command calls &lt;code>rm -f&lt;/code> for each file. A faster version of this uses xargs for a single call.&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>find /home/luser -type f -name &lt;span style="color:#e6db74">&amp;#39;\*.mpg&amp;#39;&lt;/span> | xargs rm -f&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>Hooray! We just deleted all mpg files in luer&amp;rsquo;s home directory. Unless, of course, any of those files had a name that included a space. Doh! One way to get around this is to use this modified version of the above command.&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>find /home/luser -type f -name &lt;span style="color:#e6db74">&amp;#39;\*.mpg&amp;#39;&lt;/span> | tr &lt;span style="color:#e6db74">&amp;#34;\\n&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\\000&amp;#34;&lt;/span> | xargs -0 rm -f&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>&lt;strong>Update:&lt;/strong> As Stuart notes in the comments, you should be able to replace the &amp;rsquo;tr&amp;rsquo; command with the find -print0 option. I wasn&amp;rsquo;t able to get it to work, but maybe it helps you!&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>find /home/luser -type f -name &lt;span style="color:#e6db74">&amp;#39;\*.mpg&amp;#39;&lt;/span> -print0 | xargs -0 rm -f&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>&lt;strong>Update #2:&lt;/strong> As Ole notes in the comments, GNU parallel is another option which provides parallel process running.&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>find /home/luser -type f -name ‘&lt;span style="color:#ae81ff">\*&lt;/span>.mpg’ | parallel rm -f&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div></description></item><item><title>Set OSGi Service Reference Target through Configuration</title><link>https://thecarlhall.github.io/post/set-osgi-service-reference-target-through-configuration/</link><pubDate>Sun, 06 Jun 2010 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/set-osgi-service-reference-target-through-configuration/</guid><description>&lt;p>Passing properties into a component or component factory is pretty integral to OSGi.&lt;/p>
&lt;p>A property can be a scalar or list of values.&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Component&lt;/span>(configurationFactory &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, policy &lt;span style="color:#f92672">=&lt;/span> ConfigurationPolicy.&lt;span style="color:#a6e22e">REQUIRE&lt;/span>) &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">GreatExample&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String DEFAULT_VALUE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;someVal&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Property&lt;/span>(value &lt;span style="color:#f92672">=&lt;/span> DEFAULT_VALUE) &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String PROP_SOME_VAL &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;prop.some.val&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> String someVal;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Property&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String PROP_SOME_LIST &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;prop.some.list&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> someList;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Reference&lt;/span> GreatService greatService;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// later in the activate method&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">activate&lt;/span>(Map&lt;span style="color:#f92672">&amp;lt;?&lt;/span>, &lt;span style="color:#f92672">?&amp;gt;&lt;/span> props) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// do work to get properties and setting locally if needed.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// For a good reference of how to properly retrieve properties&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// take a look at&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// http://svn.apache.org/viewvc/sling/trunk/bundles/commons/osgi/src/main/java/org/apache/sling/commons/osgi/OsgiUtil.java?view=markup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>The above example is terribly terse but the idea is pretty obvious. Now, from this, a more complex case can be built.&lt;/p>
&lt;p>Let&amp;rsquo;s say you have different implementations of GreatService and you need to configure the above class to use a certain one. This is usually done with the &amp;rsquo;target&amp;rsquo; property using ldap query syntax. This is what we&amp;rsquo;ll use to specify the wanted reference without hardwiring the particular implementation to our service consumer.&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Component&lt;/span> &lt;span style="color:#a6e22e">@Service&lt;/span> &lt;span style="color:#a6e22e">@Property&lt;/span>(name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;type&amp;#34;&lt;/span>, value&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;really&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ReallyGreatService&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> GreatService { }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>Using this arbitrary property, we are able to give a &amp;rsquo;type&amp;rsquo; to this implementation. We can pick a particular implementation using this in conjunction with the reference target.&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Reference&lt;/span>(target&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;(type=really)&amp;#34;&lt;/span>) GreatService greatService;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>While this is handy it is a compile time solution. The more flexible way to go about this is to make this a configuration time concern. Using the properties passed in when configuring the new GreatExample instance, we can tell the service reference what target to filter on.&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">activate&lt;/span>(BundleContext bc) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// registering ReallyGreatService manually to make the example clearer.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// could also be registered using SCR as the above annotations setup.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GreatService gs &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ReallyGreatService();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Hashtable gsProps &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Hashtable();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gsProps.&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;type&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;really&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ServiceRegistration reg &lt;span style="color:#f92672">=&lt;/span> bc.&lt;span style="color:#a6e22e">registerService&lt;/span>(GreatService.&lt;span style="color:#a6e22e">class&lt;/span>.&lt;span style="color:#a6e22e">getName&lt;/span>(), gs, gsProps);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GreatExample ge &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> GreatExample();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Hashtable props &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Hashtable();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> props.&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;greatService.target&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;(type=really)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// desired implementation of GreatService ServiceRegistration reg = bc.registerService(GreatExample.class.getName(), ge, props);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>If you have a specific service you want to bind to (I don&amp;rsquo;t question your reasons; just giving examples), you can use the service.pid property of the service to set the target.&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">activate&lt;/span>(BundleContext bc) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GreatExample ge &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> GreatExample();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Hashtable props &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Hashtable();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> props.&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;greatService.target&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;(service.pid=com.myCompany.SomeGreatServicePid)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// desired implementation of GreatService ServiceRegistration reg = bc.registerService(GreatExample.class.getName(), ge, props);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>&lt;em>Update (2011-01-10): Added more details to example and corrected class references.&lt;/em>&lt;/p></description></item><item><title>IntelliJ IDEA shortcut in linux</title><link>https://thecarlhall.github.io/post/intellij-idea-shortcut-in-linux/</link><pubDate>Sat, 10 Apr 2010 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/intellij-idea-shortcut-in-linux/</guid><description>&lt;p>After a lot of digging around, I finally came across &lt;a href="http://www.cs.bgu.ac.il/~gwiener/programming/how-to-make-intellij-idea-8-usable-on-linux/">this blog entry&lt;/a> telling how to make a shortcut to IDEA work in linux. In short, change your shortcut to something like the following:&lt;/p>
&lt;div class="highlight-container">
&lt;button class="copy-code-btn outline">Copy&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/bin/sh -c &lt;span style="color:#e6db74">&amp;#34;export JDK_HOME=/usr/lib/jvm/java-6-sun &amp;amp;&amp;amp; /opt/IntelliJIdea8/bin/idea.sh&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>Voila! Victory is mine!&lt;/p></description></item><item><title>keytool is Strict</title><link>https://thecarlhall.github.io/post/keychain-is-strict/</link><pubDate>Mon, 05 Apr 2010 00:00:00 +0000</pubDate><author>carl@halls.farm (Carl Hall)</author><guid>https://thecarlhall.github.io/post/keychain-is-strict/</guid><description>&lt;p>Let&amp;rsquo;s say you are setting up a connection to an LDAP server and need to get your security bits in place.  To get the certificate chain from the server, you may do something like this:&lt;/p>
&lt;blockquote>
&lt;p>openssl s_client -showcerts -connect dir.example.com:636 &amp;gt; cert_chain.pem&lt;/p>
&lt;/blockquote>
&lt;p>Now with the output of that, you want to create or add to a keystore. That command looks like this:&lt;/p>
&lt;blockquote>
&lt;p>keytool -import -storetype jks -keystore dir_example.jks -storepass dir-example -file cert_chain.pem -alias ldap-ca -noprompt&lt;/p>
&lt;/blockquote>
&lt;p>But, oh no! Java spits back,&lt;/p>
&lt;blockquote>
&lt;p>keytool error: java.lang.Exception: Input not an X.509 certificate&lt;/p>
&lt;/blockquote>
&lt;p>Well, that sucks, but have no fear! The trick to clearing this up is quite easy. keytool is quite strict. The output from the openssl command above is far too verbose for keytool, so you&amp;rsquo;ll need to clean up any text outside of the &amp;mdash;&amp;ndash;BEGIN CERTIFICATE&amp;mdash;&amp;ndash; and &amp;mdash;&amp;ndash;END CERTIFICATE&amp;mdash;&amp;ndash; markers in the file.&lt;/p></description></item></channel></rss>